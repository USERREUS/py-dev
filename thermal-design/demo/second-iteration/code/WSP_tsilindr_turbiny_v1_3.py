import math
import random
from math import *


# Область перегретого пара

# Функция определения удельной энтальпии (h, КДж/кг) как зависимость от давления (p, МПа) и температуры (Т, К)
#                                                                                           в области перегретого пара
def H2PT(p, T):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    y: float = 0  # по расчету гамма 0 tay - Свободная энергия Гиббса, идеальная часть
    x: float = 0  # по расчету гамма Pi tay - Свободная энергия Гиббса, реальная часть
    t = 540 / T  # tay
    r = 0.461526  # КДж/кг*К универсальная газовая постоянная

    # Расчет идеальной составляющей энергии Гиббса #ВЫХОДНОЕ ЗНАЧЕНИЕ

    j0 = [0.0, 1.0, -5.0, -4.0, -3.0, -2.0, -1.0, 2.0, 3.0]
    n0 = [-0.96927686500217 * (10 ** 1), 0.10086655968018 * (10 ** 2), -0.56087911283020 * (10 ** -2),
          0.71452738081455 * (10 ** -1), -0.40710498223928, 0.14240819171444 * 10, -0.43839511319450 * 10,
          -0.28408632460772, 0.21268463753307 * (10 ** -1)]

    for i in range(0, 9):
        y = y + n0[i] * j0[i] * (t ** (j0[i] - 1.0))

    # Расчет реальной составляющей Гиббса

    i = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20,
         20, 20, 21, 22, 23, 24, 24, 24]

    J = [0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50,
         57, 20, 35, 48, 21, 53, 39, 26, 40, 58]

    n1 = [-0.17731742473213 * 10 ** -2, -0.17834862292358 * 10 ** -1, -0.45996013696365 * 10 ** -1,
          -0.57581259083432 * 10 ** -1, -0.50325278727930 * 10 ** -1, -0.33032641670203 * 10 ** -4,
          -0.18948987516315 * 10 ** -3, -0.39392777243355 * 10 ** -2, -0.43797295650573 * 10 ** -1,
          -0.26674547914087 * 10 ** -4, 0.20481737692309 * 10 ** -7, 0.43870667284435 * 10 ** -6,
          -0.32277677238570 * 10 ** -4, -0.15033924542148 * 10 ** -2, -0.40668253562649 * 10 ** -1,
          -0.78847309559367 * 10 ** -9, 0.12790717852285 * 10 ** -7, 0.48225372718507 * 10 ** -6,
          0.22922076337661 * 10 ** -5, -0.16714766451061 * 10 ** -10, -0.21171472321355 * 10 ** -2,
          -0.23895741934104 * 10 ** 2, -0.59059564324270 * 10 ** -17, -0.12621808899101 * 10 ** -5,
          -0.38946842435739 * 10 ** -1, 0.11256211360459 * 10 ** -10, -0.82311340897998 * 10 ** 1,
          0.19809712802088 * 10 ** -7, 0.10406965210174 * 10 ** -18, -0.10234747095929 * 10 ** -12,
          -0.10018179379511 * 10 ** -8, -0.80882908646985 * 10 ** -10, 0.10693031879409,
          -0.33662250574171, 0.89185845355421 * 10 ** -24, 0.30629316876232 * 10 ** -12,
          -0.42002467698208 * 10 ** -5, -0.59056029685639 * 10 ** -25, 0.37826947613457 * 10 ** -5,
          -0.12768608934681 * 10 ** -14, 0.73087610595061 * 10 ** -28, 0.55414715350778 * 10 ** -16,
          -0.94369707241210 * 10 ** -6]

    for k in range(0, len(n1)):
        x += n1[k] * p ** i[k] * J[k] * (t - 0.5) ** (J[k] - 1)

    H2 = r * T * t * (y + x)  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return H2


# Функция определения удельной энтропии (S, КДж/кг*K) как зависимость от давления (p, МПа) и температуры (Т, К)
#                                                                                           в области перегретого пара
def S2PT(p, T):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    y0: float = log(p)  # по расчету гамма 0 - Свободная энергия Гиббса, идеальная часть
    yr: float = 0  # по расчету гамма r - Остаточная часть свободной энергии Гиббса
    x0: float = 0  # по расчету гамма 0 tay - Свободная энергия Гиббса, идеальная часть производной (dy0)dt
    xr: float = 0  # по расчету гамма r tay - Остаточная часть свободной энергии Гиббса, призводная (dyr)dt
    t = 540 / T  # tay
    r = 0.461526  # КДж/кг*К универсальная газовая постоянная

    # Расчет идеальной составляющей энергии Гиббса

    j0 = [0.0, 1.0, -5.0, -4.0, -3.0, -2.0, -1.0, 2.0, 3.0]
    n0 = [-0.96927686500217 * (10 ** 1), 0.10086655968018 * (10 ** 2), -0.56087911283020 * (10 ** -2),
          0.71452738081455 * (10 ** -1), -0.40710498223928, 0.14240819171444 * 10, -0.43839511319450 * 10,
          -0.28408632460772, 0.21268463753307 * (10 ** -1)]

    for i in range(0, len(j0)):
        y0 += n0[i] * t ** j0[i]

    # Расчет остаточной части свободной энергии Гиббса

    i = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20,
         20, 20, 21, 22, 23, 24, 24, 24]

    J = [0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50,
         57, 20, 35, 48, 21, 53, 39, 26, 40, 58]

    n1 = [-0.17731742473213 * 10 ** -2, -0.17834862292358 * 10 ** -1, -0.45996013696365 * 10 ** -1,
          -0.57581259083432 * 10 ** -1, -0.50325278727930 * 10 ** -1, -0.33032641670203 * 10 ** -4,
          -0.18948987516315 * 10 ** -3, -0.39392777243355 * 10 ** -2, -0.43797295650573 * 10 ** -1,
          -0.26674547914087 * 10 ** -4, 0.20481737692309 * 10 ** -7, 0.43870667284435 * 10 ** -6,
          -0.32277677238570 * 10 ** -4, -0.15033924542148 * 10 ** -2, -0.40668253562649 * 10 ** -1,
          -0.78847309559367 * 10 ** -9, 0.12790717852285 * 10 ** -7, 0.48225372718507 * 10 ** -6,
          0.22922076337661 * 10 ** -5, -0.16714766451061 * 10 ** -10, -0.21171472321355 * 10 ** -2,
          -0.23895741934104 * 10 ** 2, -0.59059564324270 * 10 ** -17, -0.12621808899101 * 10 ** -5,
          -0.38946842435739 * 10 ** -1, 0.11256211360459 * 10 ** -10, -0.82311340897998 * 10 ** 1,
          0.19809712802088 * 10 ** -7, 0.10406965210174 * 10 ** -18, -0.10234747095929 * 10 ** -12,
          -0.10018179379511 * 10 ** -8, -0.80882908646985 * 10 ** -10, 0.10693031879409,
          -0.33662250574171, 0.89185845355421 * 10 ** -24, 0.30629316876232 * 10 ** -12,
          -0.42002467698208 * 10 ** -5, -0.59056029685639 * 10 ** -25, 0.37826947613457 * 10 ** -5,
          -0.12768608934681 * 10 ** -14, 0.73087610595061 * 10 ** -28, 0.55414715350778 * 10 ** -16,
          -0.94369707241210 * 10 ** -6]

    for k in range(0, len(n1)):
        yr += n1[k] * p ** i[k] * (t - 0.5) ** J[k]

    # Расчет свободной энергии Гиббса, идеальная часть производной (dy0)dt
    for k in range(0, len(n0)):
        x0 += n0[k] * j0[k] * t ** (j0[k] - 1)

    # Расчет остаточной части свободной энергии Гиббса, призводная (dyr)dt
    for k in range(0, len(n1)):
        xr += n1[k] * p ** i[k] * J[k] * (t - 0.5) ** (J[k] - 1)

    S2 = r * (t * (x0 + xr) - (y0 + yr))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return S2


# Функция определения удельного объема водяного пара (V, м^3/кг) как зависимость от давления (p, МПа) и
#                                                                        температуры (Т, К) в области перегретого пара
def V2PT(p, T):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    Гамма0ПИ = 1 / p
    ГаммаrПИ = 0.0
    ТАУ = 540 / T
    R = 0.461526

    I = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20,
         20, 20, 21, 22, 23, 24, 24, 24]

    J = [0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50,
         57, 20, 35, 48, 21, 53, 39, 26, 40, 58]

    n1 = [-0.17731742473213 * 10 ** -2, -0.17834862292358 * 10 ** -1, -0.45996013696365 * 10 ** -1,
          -0.57581259083432 * 10 ** -1, -0.50325278727930 * 10 ** -1, -0.33032641670203 * 10 ** -4,
          -0.18948987516315 * 10 ** -3, -0.39392777243355 * 10 ** -2, -0.43797295650573 * 10 ** -1,
          -0.26674547914087 * 10 ** -4, 0.20481737692309 * 10 ** -7, 0.43870667284435 * 10 ** -6,
          -0.32277677238570 * 10 ** -4, -0.15033924542148 * 10 ** -2, -0.40668253562649 * 10 ** -1,
          -0.78847309559367 * 10 ** -9, 0.12790717852285 * 10 ** -7, 0.48225372718507 * 10 ** -6,
          0.22922076337661 * 10 ** -5, -0.16714766451061 * 10 ** -10, -0.21171472321355 * 10 ** -2,
          -0.23895741934104 * 10 ** 2, -0.59059564324270 * 10 ** -17, -0.12621808899101 * 10 ** -5,
          -0.38946842435739 * 10 ** -1, 0.11256211360459 * 10 ** -10, -0.82311340897998 * 10 ** 1,
          0.19809712802088 * 10 ** -7, 0.10406965210174 * 10 ** -18, -0.10234747095929 * 10 ** -12,
          -0.10018179379511 * 10 ** -8, -0.80882908646985 * 10 ** -10, 0.10693031879409,
          -0.33662250574171, 0.89185845355421 * 10 ** -24, 0.30629316876232 * 10 ** -12,
          -0.42002467698208 * 10 ** -5, -0.59056029685639 * 10 ** -25, 0.37826947613457 * 10 ** -5,
          -0.12768608934681 * 10 ** -14, 0.73087610595061 * 10 ** -28, 0.55414715350778 * 10 ** -16,
          -0.94369707241210 * 10 ** -6]

    for i in range(0, len(n1)):
        ГаммаrПИ += n1[i] * I[i] * (p ** (I[i] - 1)) * ((ТАУ - 0.5) ** J[i])
    v = R * T * (Гамма0ПИ + ГаммаrПИ)

    V2 = R * T * (Гамма0ПИ + ГаммаrПИ) * 10 ** (-3)  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return V2


# Функция определения температуры водяного пара (Т, К) как зависимость от давления (p, МПа) и
#                                                            удельной энтальпии (h, КДж/кг) в области перегретого пара
def T2PH(p, h):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    # h ВХОДНОЕ ЗНАЧЕНИЕ
    T2 = 0
    эта = float(h / 2000)
    Тета2а = 0.0
    Тета2b = 0.0
    Тета2c = 0.0
    n1 = [0.90584278514723 * 10 ** 3, -0.67955786399241, 0.12809002730136 * 10 ** (-3),
          0.26526571908428 * 10 ** 4, 0.45257578905948 * 10]
    hB2bc = n1[3] + ((p - n1[4]) / n1[2]) ** 0.5
    I2 = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7]
    J2 = [0, 1, 2, 3, 7, 20, 0, 1, 2, 3, 7, 9, 11, 18, 44, 0, 2, 7, 36, 38, 40, 42, 44, 24, 44, 12, 32, 44, 32, 36, 42,
          34, 44, 28]
    n2 = [0.10898952318288 * 10 ** 4, 0.84951654495535 * 10 ** 3, -0.10781748091826 * 10 ** 3,
          0.33153654801263 * 10 ** 2,
          -0.74232016790248 * 10 ** 1, 0.11765048724356 * 10 ** 2, 0.18445749355790 * 10 ** 1,
          -0.41792700549624 * 10 ** 1,
          0.62478196935812 * 10 ** 1, -0.17344563108114 * 10 ** 2, -0.20058176862096 * 10 ** 3,
          0.27196065473796 * 10 ** 3,
          -0.45511318285818 * 10 ** 3, 0.30919688604755 * 10 ** 4, 0.25226640357872 * 10 ** 6,
          - 0.61707422868339 * 10 ** (-2),
          -0.31078046629583, 0.11670873077107 * 10 ** 2, 0.12812798404046 * 10 ** 9, -0.98554909623276 * 10 ** 9,
          0.28224546973002 * 10 ** 10,
          -0.35948971410703 * 10 ** 10, 0.17227349913197 * 10 ** 10, -0.13551334240775 * 10 ** 5,
          0.12848734664650 * 10 ** 8,
          0.13865724283226 * 10 ** 1, 0.23598832556514 * 10 ** 6, -0.13105236545054 * 10 ** 8,
          0.73999835474766 * 10 ** 4,
          -0.55196697030060 * 10 ** 6, 0.37154085996233 * 10 ** 7,
          0.19127729239660 * 10 ** 5, -0.41535164835634 * 10 ** 6, -0.62459855192507 * 10 ** 2]

    for i in range(0, len(n2)):
        Тета2а = Тета2а + n2[i] * p ** I2[i] * (эта - 2.1) ** J2[i]
    I3 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 7, 7, 9,
          9]
    J3 = [0, 1, 2, 12, 18, 24, 28, 40, 0, 2, 6, 12, 18, 24, 28, 40, 2, 8, 18, 40, 1, 2, 12, 24, 2, 12, 18, 24, 28, 40,
          18, 24, 40, 28, 2, 28, 1, 40
          ]
    n3 = [0.14895041079516 * 10 ** 4, 0.74307798314034 * 10 ** 3, -0.97708318797837 * 10 ** 2,
          0.24742464705674 * 10 ** 1, -0.63281320016026, 0.11385952129658 * 10 ** 1, -0.47811863648625,
          0.85208123431544 * 10 ** (-2), 0.93747147377932, 0.33593118604916 * 10 ** 1, 0.33809355601454 * 10 ** 1,
          0.16844539671904, 0.73875745236695, -0.47128737436186, 0.15020273139707, -0.21764114219750 * 10 ** (-2),
          -0.21810755324761 * 10 ** (-1), -0.10829784403677, -0.46333324635812 * 10 ** (-1),
          0.71280351959551 * 10 ** (-4), 0.11032831789999 * 10 ** (-3), 0.18955248387902 * 10 ** (-3),
          0.30891541160537 * 10 ** (-2), 0.13555504554949 * 10 ** (-2), 0.28640237477456 * 10 ** (-6),
          -0.10779857357512 * 10 ** (-4), -0.76462712454814 * 10 ** (-4), 0.14052392818316 * 10 ** (-4),
          -0.31083814331434 * 10 ** (-4), -0.10302738212103 * 10 ** (-5), 0.28217281635040 * 10 ** (-6),
          0.12704902271945 * 10 ** (-5), 0.73803353468292 * 10 ** (-7), -0.11030139238909 * 10 ** (-7),
          -0.81456365207833 * 10 ** (-13), -0.25180545682962 * 10 ** (-10), -0.17565233969407 * 10 ** (-17),
          0.86934156344163 * 10 ** (-14)
          ]
    for i in range(0, len(n3)):
        Тета2b = Тета2b + n3[i] * ((p - 2) ** I3[i]) * (эта - 2.6) ** J3[i]
    I4 = [-7, -7, -6, -6, -5, -5, -2, -2, -1, -1, 0, 0, 1, 1, 2, 6, 6, 6, 6, 6, 6, 6, 6]
    J4 = [0, 4, 0, 2, 0, 2, 0, 1, 0, 2, 0, 1, 4, 8, 4, 0, 1, 4, 10, 12, 16, 20, 22]
    n4 = [-0.32368398555242 * 10 ** 13, 0.73263350902181 * 10 ** 13, 0.35825089945447 * 10 ** 12,
          -0.58340131851590 * 10 ** 12, -0.10783068217470 * 10 ** 11, 0.20825544563171 * 10 ** 11,
          0.61074783564516 * 10 ** 6, 0.85977722535580 * 10 ** 6, -0.25745723604170 * 10 ** 5,
          0.31081088422714 * 10 ** 5, 0.12082315865936 * 10 ** 4, 0.48219755109255 * 10 ** 3,
          0.37966001272486 * 10 ** 1, -0.10842984880077 * 10 ** 2, -0.45364172676660 * 10 ** (-1),
          0.14559115658698 * 10 ** (-12), 0.11261597407230 * 10 ** (-11), -0.17804982240686 * 10 ** (-10),
          0.12324579690832 * 10 ** (-6), -0.11606921130984 * 10 ** (-5), 0.27846367088554 * 10 ** (-4),
          -0.59270038474176 * 10 ** (-3), 0.12918582991878 * 10 ** (-2)]
    for i in range(0, len(n4)):
        Тета2c = Тета2c + n4[i] * ((p + 25) ** I4[i]) * (эта - 1.8) ** J4[i]

    if p > 4 and h < hB2bc:
        T2 = Тета2c
    elif p > 4 and h >= hB2bc:
        T2 = Тета2b
    else:
        T2 = Тета2а

    return T2  # ВЫХОДНОЕ ЗНАЧЕНИЕ


# Функция определения температуры водяного пара (Т, К) как зависимость от давления (p, МПа) и
#                                                            удельной энтропии (S, КДж/кг*K) в области перегретого пара
def T2PS(p, s):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    # s ВХОДНОЕ ЗНАЧЕНИЕ
    T2 = 0
    Тета2а = 0.0
    Тета2b = 0.0
    Тета2c = 0.0
    Iтета2а = [
        -1.5,
        - 1.5,
        - 1.5,
        - 1.5,
        - 1.5,
        - 1.5,
        - 1.25,
        - 1.25,
        - 1.25,
        - 1.0,
        - 1.0,
        - 1.0,
        - 1.0,
        - 1.0,
        - 1.0,
        - 0.75,
        - 0.75,
        - 0.5,
        - 0.5,
        - 0.5,
        - 0.5,
        - 0.25,
        - 0.25,
        - 0.25,
        - 0.25,
        0.25,
        0.25,
        0.25,
        0.25,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.75,
        0.75,
        0.75,
        0.75,
        1,
        1,
        1.25,
        1.00,
        1.5,
        1.5
    ]
    Jтета2а = [
        -24,
        - 23,
        - 19,
        - 13,
        - 11,
        - 10,
        - 19,
        - 15,
        - 6,
        - 26,
        - 21,
        - 17,
        - 16,
        - 9,
        - 8,
        - 15,
        - 14,
        - 26,
        - 13,
        - 9,
        - 7,
        - 27,
        - 25,
        - 11,
        - 6,
        1,
        4,
        8,
        11,
        0,
        1,
        5,
        6,
        10,
        14,
        16,
        0,
        4,
        9,
        17,
        7,
        18,
        3,
        15,
        5,
        18
    ]
    nтета2а = [
        -0.39235983861984 * 10 ** 6,
        0.51526573827270 * 10 ** 6,
        0.40482443161048 * 10 ** 5,
        - 0.32193790923902 * 10 ** 3,
        0.96961424218694 * 10 ** 2,
        - 0.22867846371773 * 10 ** 2,
        - 0.44942914124357 * 10 ** 6,
        - 0.50118336020166 * 10 ** 4,
        0.35684463560015,
        0.44235335848190 * 10 ** 5,
        - 0.13673388811708 * 10 ** 5,
        0.42163260207864 * 10 ** 6,
        0.22516925837475 * 10 ** 5,
        0.47442144865646 * 10 ** 3,
        - 0.14931130797647 * 10 ** 3,
        - 0.19781126320452 * 10 ** 6,
        - 0.23554399470760 * 10 ** 5,
        - 0.19070616302076 * 10 ** 5,
        0.55375669883164 * 10 ** 5,
        0.38293691437363 * 10 ** 4,
        - 0.60391860580567 * 10 ** 3,
        0.19363102620331 * 10 ** 4,
        0.42660643698610 * 10 ** 4,
        - 0.59780638872718 * 10 ** 4,
        - 0.70401463926862 * 10 ** 3,
        0.33836784107553 * 10 ** 3,
        0.20862786635187 * 10 ** 2,
        0.33834172656196 * 10 ** -1,
        - 0.43124428414893 * 10 ** -4,
        0.16653791356412 * 10 ** 3,
        - 0.13986292055898 * 10 ** 3,
        - 0.78849547999872,
        0.72132411753872 * 10 ** -1,
        - 0.59754839398283 * 10 ** -2,
        - 0.12141358953904 * 10 ** -4,
        0.23227096733871 * 10 ** -6,
        - 0.10538463566194 * 10 ** 2,
        0.20718925496502 * 10 ** 1,
        - 0.72193155260427 * 10 ** -1,
        0.20749887081120 * 10 ** -6,
        - 0.18340657911379 * 10 ** -1,
        0.29036272348696 * 10 ** -6,
        0.21037527893619,
        0.25681239729999 * 10 ** -3,
        - 0.12799002933781 * 10 ** -1,
        - 0.82198102652018 * 10 ** -5,
    ]
    сигмаТета2а = s / 2
    сигмаТета2b = s / 0.7853
    сигмаТета2c = s / 2.9251
    for i in range(0, len(nтета2а)):
        Тета2а += nтета2а[i] * (p ** Iтета2а[i]) * ((сигмаТета2а - 2) ** Jтета2а[i])
    Iтета2b = [
        -6,
        - 6,
        - 5,
        - 5,
        - 4,
        - 4,
        - 4,
        - 3,
        - 3,
        - 3,
        - 3,
        - 2,
        - 2,
        - 2,
        - 2,
        - 1,
        - 1,
        - 1,
        - 1,
        - 1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        3,
        3,
        3,
        4,
        4,
        5,
        5,
        5
    ]
    Jтета2b = [
        0,
        11,
        0,
        11,
        0,
        1,
        11,
        0,
        1,
        11,
        12,
        0,
        1,
        6,
        10,
        0,
        1,
        5,
        8,
        9,
        0,
        1,
        2,
        4,
        5,
        6,
        9,
        0,
        1,
        2,
        3,
        7,
        8,
        0,
        1,
        5,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2
    ]
    nтета2b = [
        0.31687665083497 * 10 ** 6,
        0.20864175881858 * 10 ** 2,
        - 0.39859399803599 * 10 ** 6,
        - 0.21816058518877 * 10 ** 2,
        0.22369785194242 * 10 ** 6,
        - 0.27841703445817 * 10 ** 4,
        0.99207436071480 * 10 ** 1,
        - 0.75197512299157 * 10 ** 5,
        0.29708605951158 * 10 ** 4,
        - 0.34406878548526 * 10 ** 1,
        0.38815564249115,
        0.17511295085750 * 10 ** 5,
        - 0.14237112854449 * 10 ** 4,
        0.10943803364167 * 10 ** 1,
        0.89971619308495,
        - 0.33759740098958 * 10 ** 4,
        0.47162885818355 * 10 ** 3,
        - 0.19188241993679 * 10 ** 1,
        0.41078580492196,
        - 0.33465378172097,
        0.13870034777505E4,
        - 0.40663326195838 * 10 ** 3,
        0.41727347159610 * 10 ** 2,
        0.21932549434532 * 10 ** 1,
        - 0.10320050009077 * 10 ** 1,
        0.35882943516703,
        0.52511453726066 * 10 ** -2,
        0.12838916450705 * 10 ** 2,
        - 0.28642437219381 * 10 ** 1,
        0.56912683664855,
        - 0.99962954584931 * 10 ** -1,
        - 0.32632037778459 * 10 ** -2,
        0.23320922576723 * 10 ** -3,
        - 0.15334809857450,
        0.29072288239902 * 10 ** -1,
        0.37534702741167 * 10 ** -3,
        0.17296691702411 * 10 ** -2,
        - 0.38556050844504 * 10 ** -3,
        - 0.35017712292608 * 10 ** -4,
        - 0.14566393631492 * 10 ** -4,
        0.56420857267269 * 10 ** -5,
        0.41286150074605 * 10 ** -7,
        - 0.20684671118824 * 10 ** -7,
        0.16409393674725 * 10 ** -8
    ]
    for i in range(0, len(nтета2b)):
        Тета2b += nтета2b[i] * (p ** Iтета2b[i]) * ((10 - сигмаТета2b) ** Jтета2b[i])
    Iтета2c = [
        -2,
        - 2,
        - 1,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        3,
        3,
        3,
        4,
        4,
        4,
        5,
        5,
        5,
        6,
        6,
        7,
        7,
        7,
        7,
        7
    ]
    Jтета2c = [
        0,
        1,
        0,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        4,
        0,
        1,
        2,
        0,
        1,
        5,
        0,
        1,
        4,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        4,
        5
    ]
    nтета2c = [
        0.90968501005365 * 10 ** 3,
        0.24045667088420 * 10 ** 4,
        - 0.59162326387130 * 10 ** 3,
        0.54145404128074 * 10 ** 3,
        - 0.27098308411192 * 10 ** 3,
        0.97976525097926 * 10 ** 3,
        - 0.46966772959435 * 10 ** 3,
        0.14399274604723 * 10 ** 2,
        - 0.19104204230429 * 10 ** 2,
        0.53299167111971 * 10 ** 1,
        - 0.21252975375934 * 10 ** 2,
        - 0.31147334413760,
        0.60334840894623,
        - 0.42764839702509 * 10 ** -1,
        0.58185597255259 * 10 ** -2,
        - 0.14597008284753 * 10 ** -1,
        0.56631175631027 * 10 ** -2,
        - 0.76155864584577 * 10 ** -4,
        0.22440342919332 * 10 ** -3,
        - 0.12561095013413 * 10 ** -4,
        0.63323132660934 * 10 ** -6,
        - 0.20541989675375 * 10 ** -5,
        0.36405370390082 * 10 ** -7,
        - 0.29759897789215 * 10 ** -8,
        0.10136618529763 * 10 ** -7,
        0.59925719692351 * 10 ** -11,
        - 0.20677870105164 * 10 ** -10,
        - 0.20874278181886 * 10 ** -10,
        0.10162166825089 * 10 ** -9,
        - 0.16429828281347 * 10 ** -9
    ]
    for i in range(0, len(nтета2c)):
        Тета2c += nтета2c[i] * (p ** Iтета2c[i]) * ((2 - сигмаТета2c) ** Jтета2c[i])
    if p > 4 and s < 5.85:
        T2 = Тета2c
    elif p > 4 and s >= 5.85:
        T2 = Тета2b
    else:
        T2 = Тета2а

    return T2  # ВЫХОДНОЕ ЗНАЧЕНИЕ


# Область линии насыщения
def DSWT(T):  # Функция для определения плотности на линнии насыщения по температуре левая ветка
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    if T <= 623.15:
        ПИ = PST(T) / 16.53
        ГаммаrПИ = 0.0
        ТАУ = 1386 / T
        R = 0.461526
        I = [0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             1,
             1,
             1,
             1,
             2,
             2,
             2,
             2,
             2,
             3,
             3,
             3,
             4,
             4,
             4,
             5,
             8,
             8,
             21,
             23,
             29,
             30,
             31,
             32
             ]
        J = [-2,
             -1,
             0,
             1,
             2,
             3,
             4,
             5,
             -9,
             -7,
             -1,
             0,
             1,
             3,
             -3,
             0,
             1,
             3,
             17,
             -4,
             0,
             6,
             -5,
             -2,
             10,
             -8,
             -11,
             -6,
             -29,
             -31,
             -38,
             -39,
             -40,
             -41,
             ]
        n1 = [0.14632971213167,
              -0.84548187169114,
              -3.756360367204,
              3.3855169168385,
              -0.95791963387872,
              0.15772038513228,
              -0.016616417199501,
              0.00081214629983568,
              0.00028319080123804,
              -0.00060706301565874,
              -0.018990068218419,
              -0.032529748770505,
              -0.021841717175414,
              -5.283835796993 * 10 ** (-5),
              -0.00047184321073267,
              -0.00030001780793026,
              4.7661393906987 * 10 ** (-5),
              -4.4141845330846 * 10 ** (-6),
              -7.2694996297594 * 10 ** (-16),
              -3.1679644845054 * 10 ** (-5),
              -2.8270797985312 * 10 ** (-6),
              -8.5205128120103 * 10 ** (-10),
              -2.2425281908 * 10 ** (-6),
              -6.5171222895601 * 10 ** (-7),
              -1.4341729937924 * 10 ** (-13),
              -4.0516996860117 * 10 ** (-7),
              -1.2734301741641 * 10 ** (-9),
              -1.7424871230634 * 10 ** (-10),
              -6.8762131295531 * 10 ** (-19),
              1.4478307828521 * 10 ** (-20),
              2.6335781662795 * 10 ** (-23),
              -1.1947622640071 * 10 ** (-23),
              1.8228094581404 * 10 ** (-24),
              -9.3537087292458 * 10 ** (-26),
              ]
        for i in range(0, len(n1)):
            ГаммаrПИ += n1[i] * I[i] * ((7.1 - ПИ) ** (I[i] - 1)) * ((ТАУ - 1.222) ** J[i])

        v = 1 / (((R * T * ПИ * (-ГаммаrПИ)) / PST(T)) * 10 ** (-3))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
        return v


# Функция определения температуры (Т, К) как зависимость от давления (p, МПа) на линии насыщения
def TSP(p):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    n = [0, 0.11670521452767 * 10 ** 4, -0.72421316703206 * 10 ** 6, -0.17073846940092 * 10 ** 2,
         0.1202082470247 * 10 ** 5,
         -0.32325550322333 * 10 ** 7, 0.1491510861353 * 10 ** 2, -0.48232657361591 * 10 ** 4,
         0.40511340542057 * 10 ** 6,
         -0.23855557567849, 0.65017534844798 * 10 ** 3]

    beta = p ** 0.25
    E = beta * beta + n[3] * beta + n[6]
    F = n[1] * beta * beta + n[4] * beta + n[7]
    G = n[2] * beta * beta + n[5] * beta + n[8]
    D = 2 * G / (- F - ((F * F - 4 * E * G) ** 0.5))
    T = (n[10] + D - ((n[10] + D) ** 2 - 4 * (n[9] + n[10] * D)) ** 0.5) / 2  # ВЫХОДНОЕ ЗНАЧЕНИЕ

    return T


# Функция определения давления (p, МПа) как зависимость от температуры (Т, К) на линии насыщения
def PST(T):
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    n = [0.11670521452767 * 10 ** 4,
         -0.72421316703206 * 10 ** 6,
         -0.17073846940092 * 10 ** 2,
         0.1202082470247 * 10 ** 5,
         -0.32325550322333 * 10 ** 7,
         0.1491510861353 * 10 ** 2,
         -0.48232657361591 * 10 ** 4,
         0.40511340542057 * 10 ** 6,
         -0.23855557567849,
         0.65017534844798 * 10 ** 3]
    v = T + (n[8] / (T - n[9]))
    A = v * v + n[0] * v + n[1]
    B = n[2] * v * v + n[3] * v + n[4]
    C = n[5] * v * v + n[6] * v + n[7]
    beta = (2 * C / (-B + (B * B - 4 * A * C) ** 0.5))
    p = beta ** 4  # ВЫХОДНОЕ ЗНАЧЕНИЕ

    return p


# Функция определения удельной энтальпии ВОДЫ (h, КДж/кг) как зависимость от температуры (Т, К) на линии насыщения
def HSWT(T):  # Функция для определения энтальпии воды на линнии насыщения по температуре
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    R = 0.461526
    v = 0.0
    ГаммаТау = 0.0
    if T == 647.096:
        return 2087.546845
    if T <= 623.15:
        I1 = [0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              4,
              4,
              4,
              5,
              8,
              8,
              21,
              23,
              29,
              30,
              31,
              32
              ]
        J1 = [-2,
              -1,
              0,
              1,
              2,
              3,
              4,
              5,
              -9,
              -7,
              -1,
              0,
              1,
              3,
              -3,
              0,
              1,
              3,
              17,
              -4,
              0,
              6,
              -5,
              -2,
              10,
              -8,
              -11,
              -6,
              -29,
              -31,
              -38,
              -39,
              -40,
              -41,
              ]
        n1 = [0.14632971213167,
              -0.84548187169114,
              -3.756360367204,
              3.3855169168385,
              -0.95791963387872,
              0.15772038513228,
              -0.016616417199501,
              0.00081214629983568,
              0.00028319080123804,
              -0.00060706301565874,
              -0.018990068218419,
              -0.032529748770505,
              -0.021841717175414,
              -5.283835796993 * 10 ** (-5),
              -0.00047184321073267,
              -0.00030001780793026,
              4.7661393906987 * 10 ** (-5),
              -4.4141845330846 * 10 ** (-6),
              -7.2694996297594 * 10 ** (-16),
              -3.1679644845054 * 10 ** (-5),
              -2.8270797985312 * 10 ** (-6),
              -8.5205128120103 * 10 ** (-10),
              -2.2425281908 * 10 ** (-6),
              -6.5171222895601 * 10 ** (-7),
              -1.4341729937924 * 10 ** (-13),
              -4.0516996860117 * 10 ** (-7),
              -1.2734301741641 * 10 ** (-9),
              -1.7424871230634 * 10 ** (-10),
              -6.8762131295531 * 10 ** (-19),
              1.4478307828521 * 10 ** (-20),
              2.6335781662795 * 10 ** (-23),
              -1.1947622640071 * 10 ** (-23),
              1.8228094581404 * 10 ** (-24),
              -9.3537087292458 * 10 ** (-26),
              ]
        Пи1 = PST(T) / 16.53
        Тау1 = 1386 / T
        for i in range(0, len(n1)):
            ГаммаТау += n1[i] * ((7.1 - Пи1) ** I1[i]) * J1[i] * ((Тау1 - 1.222) ** (J1[i] - 1))
        h = R * T * Тау1 * ГаммаТау
        return h
    if 623.15 < T < 647.096:
        if PST(623.15) < PST(T) < 19.0881189173929:
            I3c = [-12,
                   -12,
                   -12,
                   -10,
                   -10,
                   -10,
                   -8,
                   -8,
                   -8,
                   -6,
                   -5,
                   -5,
                   -5,
                   -4,
                   -4,
                   -3,
                   -3,
                   -2,
                   -2,
                   -2,
                   -1,
                   -1,
                   -1,
                   0,
                   0,
                   0,
                   1,
                   1,
                   2,
                   2,
                   2,
                   2,
                   3,
                   3,
                   8
                   ]
            J3c = [6,
                   8,
                   10,
                   6,
                   8,
                   10,
                   5,
                   6,
                   7,
                   8,
                   1,
                   4,
                   7,
                   2,
                   8,
                   0,
                   3,
                   0,
                   4,
                   5,
                   0,
                   1,
                   2,
                   0,
                   1,
                   2,
                   0,
                   2,
                   0,
                   1,
                   3,
                   7,
                   0,
                   7,
                   1
                   ]
            n3c = [3.11967788763030,
                   2.76713458847564 * 10 ** 4,
                   3.22583103403269 * 10 ** 7,
                   -3.42416065095363 * 10 ** 2,
                   -8.99732529907377 * 10 ** 5,
                   -7.93892049821251 * 10 ** 7,
                   9.53193003217388 * 10 ** 1,
                   2.29784742345072 * 10 ** 3,
                   1.75336675322499 * 10 ** 5,
                   7.91214365222792 * 10 ** 6,
                   3.19933345844209 * 10 ** (-5),
                   -6.59508863555767 * 10 ** 1,
                   -8.33426563212851 * 10 ** 5,
                   6.45734680583292 * 10 ** (-2),
                   -3.82031020570813 * 10 ** 6,
                   4.06398848470079 * 10 ** (-5),
                   3.10327498492008 * 10 ** 1,
                   -8.92996718483724 * 10 ** (-4),
                   2.34604891591616 * 10 ** 2,
                   3.77515668966951 * 10 ** 3,
                   1.58646812591361 * 10 ** (-2),
                   7.07906336241843 * 10 ** (-1),
                   1.26016225146570 * 10 ** 1,
                   7.36143655772152 * 10 ** (-1),
                   6.76544268999101 * 10 ** (-1),
                   -1.78100588189137 * 10 ** 1,
                   -1.56531975531713 * 10 ** (-1),
                   1.17707430048158 * 10 ** 1,
                   8.40143653860447 * 10 ** (-2),
                   -1.86442467471949 * 10 ** (-1),
                   -4.40170203949645 * 10 ** 1,
                   1.23290423502494 * 10 ** 6,
                   -2.40650039730845 * 10 ** (-2),
                   -1.07077716660869 * 10 ** 6,
                   4.38319858566475 * 10 ** (-2)
                   ]
            a3c = 0.259
            b3c = 0.903
            c3c = 1
            d3c = 1
            e3c = 1
            Пи3с = PST(T) / 40
            Тета3с = T / 690
            for i in range(0, len(n3c)):
                v += n3c[i] * (((Пи3с - a3c) ** c3c) ** I3c[i]) * (((Тета3с - b3c) ** d3c) ** J3c[i])
            v = 0.0022 * v ** e3c
        if 19.0881189173929 < PST(T) < PST(643.15):
            I3s = [-12,
                   -12,
                   -10,
                   -8,
                   -6,
                   -5,
                   -5,
                   -4,
                   -4,
                   -3,
                   -3,
                   -2,
                   -1,
                   -1,
                   -1,
                   0,
                   0,
                   0,
                   0,
                   1,
                   1,
                   3,
                   3,
                   3,
                   4,
                   4,
                   4,
                   5,
                   14
                   ]
            J3s = [20,
                   24,
                   22,
                   14,
                   36,
                   8,
                   16,
                   6,
                   32,
                   3,
                   8,
                   4,
                   1,
                   2,
                   3,
                   0,
                   1,
                   4,
                   28,
                   0,
                   32,
                   0,
                   1,
                   2,
                   3,
                   18,
                   24,
                   4,
                   24
                   ]
            n3s = [-5.32466612140254 * 10 ** 22,
                   1.00415480000824 * 10 ** 31,
                   -1.91540001821367 * 10 ** 29,
                   1.05618377808847 * 10 ** 16,
                   2.02281884477061 * 10 ** 58,
                   8.84585472596134 * 10 ** 7,
                   1.66540181638363 * 10 ** 22,
                   -3.13563197669111 * 10 ** 5,
                   -1.85662327545324 * 10 ** 53,
                   -6.24942093918942 * 10 ** -2,
                   -5.04160724132590 * 10 ** 9,
                   1.87514491833092 * 10 ** 4,
                   1.21399979993217 * 10 ** -3,
                   1.88317043049455,
                   -1.67073503962060 * 10 ** 3,
                   9.65961650599775 * 10 ** -1,
                   2.94885696802488,
                   -6.53915627346115 * 10 ** +4,
                   6.04012200163444 * 10 ** +49,
                   -1.98339358557937 * 10 ** -1,
                   -1.75984090163501 * 10 ** 57,
                   3.56314881403987,
                   -5.75991255144384 * 10 ** 2,
                   4.56213415338071 * 10 ** 4,
                   -1.09174044987829 * 10 ** 7,
                   4.37796099975134 * 10 ** 33,
                   -6.16552611135792 * 10 ** 45,
                   1.93568768917797 * 10 ** 9,
                   9.50898170425042 * 10 ** 53
                   ]
            a3s = 0.886
            b3s = 0.990
            c3s = 1
            d3s = 1
            e3s = 4
            Пи3s = PST(T) / 21
            Тета3s = T / 640
            for i in range(0, len(n3s)):
                v += n3s[i] * (((Пи3s - a3s) ** c3s) ** I3s[i]) * (((Тета3s - b3s) ** d3s) ** J3s[i])
            v = 0.0022 * v ** e3s
        if PST(643.15) < PST(T) < 21.93161551:
            I3u = [-12,
                   -10,
                   -10,
                   -10,
                   -8,
                   -8,
                   -8,
                   -6,
                   -6,
                   -5,
                   -5,
                   -5,
                   -3,
                   -1,
                   -1,
                   -1,
                   -1,
                   0,
                   0,
                   1,
                   2,
                   2,
                   3,
                   5,
                   5,
                   5,
                   6,
                   6,
                   8,
                   8,
                   10,
                   12,
                   12,
                   12,
                   14,
                   14,
                   14,
                   14
                   ]
            J3u = [14,
                   10,
                   12,
                   14,
                   10,
                   12,
                   14,
                   8,
                   12,
                   4,
                   8,
                   12,
                   2,
                   -1,
                   1,
                   12,
                   14,
                   -3,
                   1,
                   -2,
                   5,
                   10,
                   -5,
                   -4,
                   2,
                   3,
                   -5,
                   2,
                   -8,
                   8,
                   -4,
                   -12,
                   -4,
                   4,
                   -12,
                   -10,
                   -6,
                   6
                   ]
            n3u = [1.22088349258355 * 10 ** 17,
                   1.04216468608488 * 10 ** 9,
                   -8.82666931564652 * 10 ** 15,
                   2.59929510849499 * 10 ** 19,
                   2.22612779142211 * 10 ** 14,
                   -8.78473585050085 * 10 ** 17,
                   -3.14432577551552 * 10 ** 21,
                   -2.16934916996285 * 10 ** 12,
                   1.59079648196849 * 10 ** 20,
                   -3.39567617303423 * 10 ** 2,
                   8.84387651337836 * 10 ** 12,
                   -8.43405926846418 * 10 ** 20,
                   1.14178193518022 * 10 ** 1,
                   -1.22708229235641 * 10 ** -4,
                   -1.06201671767107 * 10 ** 2,
                   9.03443213959313 * 10 ** 24,
                   -6.93996270370852 * 10 ** 27,
                   6.48916718965575 * 10 ** -9,
                   7.18957567127851 * 10 ** 3,
                   1.05581745346187 * 10 ** -3,
                   -6.51903203602581 * 10 ** 14,
                   -1.60116813274676 * 10 ** 24,
                   -5.10254294237837 * 10 ** -9,
                   -1.52355388953402 * 10 ** -1,
                   6.77143292290144 * 10 ** 11,
                   2.76378438378930 * 10 ** 14,
                   1.16862983141686 * 10 ** -2,
                   -3.01426947980171 * 10 ** 13,
                   1.69719813884840 * 10 ** -8,
                   1.04674840020929 * 10 ** 26,
                   -1.08016904560140 * 10 ** 4,
                   -9.90623601934295 * 10 ** -13,
                   5.36116483602738 * 10 ** 6,
                   2.26145963747881 * 10 ** 21,
                   -4.88731565776210 * 10 ** -10,
                   1.51001548880670 * 10 ** -5,
                   -2.27700464643920 * 10 ** 4,
                   -7.81754507698846 * 10 ** 27
                   ]
            a3u = 0.902
            b3u = 0.988
            c3u = 1
            d3u = 1
            e3u = 1
            Пи3u = PST(T) / 23
            Тета3u = T / 650
            for i in range(0, len(n3u)):
                v += n3u[i] * (((Пи3u - a3u) ** c3u) ** I3u[i]) * (((Тета3u - b3u) ** d3u) ** J3u[i])
            v = 0.0026 * v ** e3u
        if 21.93161551 < PST(T):
            I3y = [0,
                   0,
                   0,
                   0,
                   1,
                   2,
                   2,
                   2,
                   2,
                   3,
                   3,
                   3,
                   4,
                   4,
                   5,
                   5,
                   8,
                   8,
                   10,
                   12
                   ]
            J3y = [-3,
                   1,
                   5,
                   8,
                   8,
                   -4,
                   -1,
                   4,
                   5,
                   -8,
                   4,
                   8,
                   -6,
                   6,
                   -2,
                   1,
                   -8,
                   -2,
                   -5,
                   -8
                   ]
            n3y = [-5.25597995024633 * 10 ** -10,
                   5.83441305228407 * 10 ** 3,
                   -1.34778968457925 * 10 ** 16,
                   1.18973500934212 * 10 ** 25,
                   -1.59096490904708 * 10 ** 26,
                   -3.15839902302021 * 10 ** -7,
                   4.96212197158239 * 10 ** 2,
                   3.27777227273171 * 10 ** 18,
                   -5.27114657850696 * 10 ** 21,
                   2.10017506281863 * 10 ** -17,
                   7.05106224399834 * 10 ** 20,
                   -2.66713136106469 * 10 ** 30,
                   -1.45370512554562 * 10 ** -8,
                   1.49333917053130 * 10 ** 27,
                   -1.49795620287641 * 10 ** 7,
                   -3.81881906271100 * 10 ** 15,
                   7.24660165585797 * 10 ** -5,
                   -9.37808169550193 * 10 ** 13,
                   5.14411468376383 * 10 ** 9,
                   -8.28198594040141 * 10 ** 4
                   ]
            a3y = 0.996
            b3y = 0.994
            c3y = 1
            d3y = 1
            e3y = 4
            Пи3y = PST(T) / 22
            Тета3y = T / 650
            for i in range(0, len(n3y)):
                v += n3y[i] * (((Пи3y - a3y) ** c3y) ** I3y[i]) * (((Тета3y - b3y) ** d3y) ** J3y[i])
            v = 0.0031 * v ** e3y
        r = 1 / v
        ТАУ = 647.096 / T
        Дельта = r / 322
        I2 = [0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              6,
              6,
              6,
              7,
              8,
              9,
              9,
              10,
              10,
              11]
        J2 = [0,
              1,
              2,
              7,
              10,
              12,
              23,
              2,
              6,
              15,
              17,
              0,
              2,
              6,
              7,
              22,
              26,
              0,
              2,
              4,
              16,
              26,
              0,
              2,
              4,
              26,
              1,
              3,
              26,
              0,
              2,
              26,
              2,
              26,
              2,
              26,
              0,
              1,
              26
              ]
        n2 = [- 0.15732845290239 * 10 ** 2,
              0.20944396974307 * 10 ** 2,
              -0.76867707878716 * 10 ** 1,
              0.26185947787954 * 10 ** 1,
              -0.28080781148620 * 10 ** 1,
              0.12053369696517 * 10 ** 1,
              -0.84566812812502 * 10 ** -2,
              - 0.12654315477714 * 10 ** 1,
              - 0.11524407806681 * 10 ** 1,
              0.88521043984318,
              - 0.64207765181607,
              0.38493460186671,
              - 0.85214708824206,
              0.48972281541877 * 10 ** 1,
              - 0.30502617256965 * 10 ** 1,
              0.39420536879154 * 10 ** -1,
              0.12558408424308,
              - 0.27999329698710,
              0.13899799569460 * 10 ** 1,
              - 0.20189915023570 * 10 ** 1,
              - 0.82147637173963 * 10 ** -2,
              - 0.47596035734923,
              0.43984074473500 * 10 ** -1,
              - 0.44476435428739,
              0.90572070719733,
              0.70522450087967,
              0.10770512626332,
              - 0.32913623258954,
              - 0.50871062041158,
              - 0.22175400873096 * 10 ** -1,
              0.94260751665092 * 10 ** -1,
              0.16436278447961,
              - 0.13503372241348 * 10 ** -1,
              - 0.14834345352472 * 10 ** -1,
              0.57922953628084 * 10 ** -3,
              0.32308904703711 * 10 ** -2,
              0.80964802996215 * 10 ** -4,
              - 0.16557679795037 * 10 ** -3,
              - 0.449238990618 * 10 ** -4,
              ]
        ФиДельта = 0.0
        ФиТау = 0.0
        for i in range(0, len(n2)):
            ФиДельта += n2[i] * I2[i] * (Дельта ** (I2[i] - 1)) * ТАУ ** (J2[i])
            ФиТау += n2[i] * J2[i] * (Дельта ** I2[i]) * ТАУ ** (J2[i] - 1)
        ФиДельта = (0.10658070028513 * 10 ** 1 / Дельта) + ФиДельта
        h = R * T * (ТАУ * ФиТау + Дельта * ФиДельта)  # ВЫХОДНОЕ ЗНАЧЕНИЕ
        return h


# Функция определения удельной энтальпии ПАРА (h, КДж/кг) как зависимость от температуры (Т, К) на линии насыщения
def HSST(T):  # Функция для определения энтальпии пара на линнии насыщения по температуре
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    R = 0.461526
    v = 0.0
    if T == 647.096:
        h = 2087.546845
        return h
    if T <= 623.15:
        y: float = 0
        x: float = 0
        t = 540 / T
        r = 0.461526
        j0 = [0.0, 1.0, -5.0, -4.0, -3.0, -2.0, -1.0, 2.0, 3.0]
        n0 = [-0.96927686500217 * (10 ** 1), 0.10086655968018 * (10 ** 2), -0.56087911283020 * (10 ** -2),
              0.71452738081455 * (10 ** -1), -0.40710498223928, 0.14240819171444 * 10, -0.43839511319450 * 10,
              -0.28408632460772, 0.21268463753307 * (10 ** -1)]
        for i in range(0, 9):
            y = y + n0[i] * j0[i] * (t ** (j0[i] - 1.0))
        i = [1,
             1,
             1,
             1,
             1,
             2,
             2,
             2,
             2,
             2,
             3,
             3,
             3,
             3,
             3,
             4,
             4,
             4,
             5,
             6,
             6,
             6,
             7,
             7,
             7,
             8,
             8,
             9,
             10,
             10,
             10,
             16,
             16,
             18,
             20,
             20,
             20,
             21,
             22,
             23,
             24,
             24,
             24]
        J = [0,
             1,
             2,
             3,
             6,
             1,
             2,
             4,
             7,
             36,
             0,
             1,
             3,
             6,
             35,
             1,
             2,
             3,
             7,
             3,
             16,
             35,
             0,
             11,
             25,
             8,
             36,
             13,
             4,
             10,
             14,
             29,
             50,
             57,
             20,
             35,
             48,
             21,
             53,
             39,
             26,
             40,
             58]
        n1 = [-0.17731742473213 * 10 ** -2,
              -0.17834862292358 * 10 ** -1,
              -0.45996013696365 * 10 ** -1,
              -0.57581259083432 * 10 ** -1,
              -0.50325278727930 * 10 ** -1,
              -0.33032641670203 * 10 ** -4,
              -0.18948987516315 * 10 ** -3,
              -0.39392777243355 * 10 ** -2,
              -0.43797295650573 * 10 ** -1,
              -0.26674547914087 * 10 ** -4,
              0.20481737692309 * 10 ** -7,
              0.43870667284435 * 10 ** -6,
              -0.32277677238570 * 10 ** -4,
              -0.15033924542148 * 10 ** -2,
              -0.40668253562649 * 10 ** -1,
              -0.78847309559367 * 10 ** -9,
              0.12790717852285 * 10 ** -7,
              0.48225372718507 * 10 ** -6,
              0.22922076337661 * 10 ** -5,
              -0.16714766451061 * 10 ** -10,
              -0.21171472321355 * 10 ** -2,
              -0.23895741934104 * 10 ** 2,
              -0.59059564324270 * 10 ** -17,
              -0.12621808899101 * 10 ** -5,
              -0.38946842435739 * 10 ** -1,
              0.11256211360459 * 10 ** -10,
              -0.82311340897998 * 10 ** 1,
              0.19809712802088 * 10 ** -7,
              0.10406965210174 * 10 ** -18,
              -0.10234747095929 * 10 ** -12,
              -0.10018179379511 * 10 ** -8,
              -0.80882908646985 * 10 ** -10,
              0.10693031879409,
              -0.33662250574171,
              0.89185845355421 * 10 ** -24,
              0.30629316876232 * 10 ** -12,
              -0.42002467698208 * 10 ** -5,
              -0.59056029685639 * 10 ** -25,
              0.37826947613457 * 10 ** -5,
              -0.12768608934681 * 10 ** -14,
              0.73087610595061 * 10 ** -28,
              0.55414715350778 * 10 ** -16,
              -0.94369707241210 * 10 ** -6]
        a = float(0)
        for s in range(0, len(n1)):
            a += n1[s] * PST(T) ** i[s] * J[s] * (t - 0.5) ** (J[s] - 1)
        return r * T * t * (y + a)
    if 623.15 < T < 647.096:
        if 20.5 < PST(T) < PST(643.15):
            I3r = [-8,
                   -8,
                   -3,
                   -3,
                   -3,
                   -3,
                   -3,
                   0,
                   0,
                   0,
                   0,
                   3,
                   3,
                   8,
                   8,
                   8,
                   8,
                   10,
                   10,
                   10,
                   10,
                   10,
                   10,
                   10,
                   10,
                   12,
                   14
                   ]
            J3r = [6,
                   14,
                   -3,
                   3,
                   4,
                   5,
                   8,
                   -1,
                   0,
                   1,
                   5,
                   -6,
                   -2,
                   -12,
                   -10,
                   -8,
                   -5,
                   -12,
                   -10,
                   -8,
                   -6,
                   -5,
                   -4,
                   -3,
                   -2,
                   -12,
                   -12
                   ]
            n3r = [1.44165955660863 * 10 ** -3,
                   -7.01438599628258 * 10 ** 12,
                   -8.30946716459219 * 10 ** -17,
                   2.61975135368109 * 10 ** -1,
                   3.93097214706245 * 10 ** 2,
                   -1.04334030654021 * 10 ** 4,
                   4.90112654154211 * 10 ** 8,
                   -1.47104222772069 * 10 ** -4,
                   1.03602748043408,
                   3.05308890065089,
                   -3.99745276971264 * 10 ** 6,
                   5.69233719593750 * 10 ** -12,
                   -4.64923504407778 * 10 ** -2,
                   -5.35400396512906 * 10 ** -18,
                   3.99988795693162 * 10 ** -13,
                   -5.36479560201811 * 10 ** -7,
                   1.59536722411202 * 10 ** -2,
                   2.70303248860217 * 10 ** -15,
                   2.44247453858506 * 10 ** -8,
                   -9.83430636716454 * 10 ** -6,
                   6.63513144224454 * 10 ** -2,
                   -9.93456957845006,
                   5.46491323528491 * 10 ** 2,
                   -1.43365406393758 * 10 ** 4,
                   1.50764974125511 * 10 ** 5,
                   -3.37209709340105 * 10 ** -10,
                   3.77501980025469 * 10 ** -9
                   ]
            a3r = 0.874
            b3r = 0.982
            c3r = 1
            d3r = 1
            e3r = 1
            Пи3r = PST(T) / 23
            Тета3r = T / 650
            for i in range(0, len(n3r)):
                v += n3r[i] * (((Пи3r - a3r) ** c3r) ** I3r[i]) * (((Тета3r - b3r) ** d3r) ** J3r[i])
            v = 0.0054 * v ** e3r
        if PST(623.15) < PST(T) < 20.5:
            I3t = [0,
                   0,
                   0,
                   0,
                   1,
                   1,
                   2,
                   2,
                   2,
                   3,
                   3,
                   4,
                   4,
                   7,
                   7,
                   7,
                   7,
                   7,
                   10,
                   10,
                   10,
                   10,
                   10,
                   18,
                   20,
                   22,
                   22,
                   24,
                   28,
                   32,
                   32,
                   32,
                   36
                   ]
            J3t = [0,
                   1,
                   4,
                   12,
                   0,
                   10,
                   0,
                   6,
                   14,
                   3,
                   8,
                   0,
                   10,
                   3,
                   4,
                   7,
                   20,
                   36,
                   10,
                   12,
                   14,
                   16,
                   22,
                   18,
                   32,
                   22,
                   36,
                   24,
                   28,
                   22,
                   32,
                   36,
                   36
                   ]
            n3t = [1.55287249586268,
                   6.64235115009031,
                   -2.89366236727210 * 10 ** 3,
                   -3.85923202309848 * 10 ** 12,
                   -2.91002915783761,
                   -8.29088246858083 * 10 ** 11,
                   1.76814899675218,
                   -5.34686695713469 * 10 ** 8,
                   1.60464608687834 * 10 ** 17,
                   1.96435366560186 * 10 ** 5,
                   1.56637427541729 * 10 ** 12,
                   -1.78154560260006,
                   -2.29746237623692 * 10 ** 15,
                   3.85659001648006 * 10 ** 7,
                   1.10554446790543 * 10 ** 9,
                   -6.77073830687349 * 10 ** 13,
                   -3.27910592086523 * 10 ** 30,
                   -3.41552040860644 * 10 ** 50,
                   -5.27251339709047 * 10 ** 20,
                   2.45375640937055 * 10 ** 23,
                   -1.68776617209269 * 10 ** 26,
                   3.58958955867578 * 10 ** 28,
                   -6.56475280339411 * 10 ** 35,
                   3.55286045512301 * 10 ** 38,
                   5.69021454413270 * 10 ** 57,
                   -7.00584546433113 * 10 ** 47,
                   -7.05772623326374 * 10 ** 64,
                   1.66861176200148 * 10 ** 52,
                   -3.00475129680486 * 10 ** 60,
                   -6.68481295196808 * 10 ** 50,
                   4.28432338620678 * 10 ** 68,
                   -4.44227367758304 * 10 ** 71,
                   -2.81396013562745 * 10 ** 76
                   ]
            a3t = 0.803
            b3t = 1.02
            c3t = 1
            d3t = 1
            e3t = 1
            Пи3t = PST(T) / 20
            Тета3t = T / 650
            for i in range(0, len(n3t)):
                v += n3t[i] * (((Пи3t - a3t) ** c3t) ** I3t[i]) * (((Тета3t - b3t) ** d3t) ** J3t[i])
            v = 0.0088 * v ** e3t
        if PST(643.15) < PST(T) < 21.90096265:
            I3x = [-8,
                   -6,
                   -5,
                   -4,
                   -4,
                   -4,
                   -3,
                   -3,
                   -1,
                   0,
                   0,
                   0,
                   1,
                   1,
                   2,
                   3,
                   3,
                   3,
                   4,
                   5,
                   5,
                   5,
                   6,
                   8,
                   8,
                   8,
                   8,
                   10,
                   12,
                   12,
                   12,
                   12,
                   14,
                   14,
                   14,
                   14
                   ]
            J3x = [14,
                   10,
                   10,
                   1,
                   2,
                   14,
                   -2,
                   12,
                   5,
                   0,
                   4,
                   10,
                   -10,
                   -1,
                   6,
                   -12,
                   0,
                   8,
                   3,
                   -6,
                   -2,
                   1,
                   1,
                   -6,
                   -3,
                   1,
                   8,
                   -8,
                   -10,
                   -8,
                   -5,
                   -4,
                   -12,
                   -10,
                   -8,
                   -6
                   ]
            n3x = [3.77373741298151 * 10 ** 18,
                   -5.07100883722913 * 10 ** 12,
                   -1.03363225598860 * 10 ** 15,
                   1.84790814320773 * 10 ** -6,
                   -9.24729378390945 * 10 ** -4,
                   -4.25999562292738 * 10 ** 23,
                   -4.62307771873973 * 10 ** -13,
                   1.07319065855767 * 10 ** 21,
                   6.48662492280682 * 10 ** 10,
                   2.44200600688281,
                   -8.51535733484258 * 10 ** 9,
                   1.69894481433592 * 10 ** 21,
                   2.15780222509020 * 10 ** -27,
                   -3.20850551367334 * 10 ** -1,
                   -3.82642448458610 * 10 ** 16,
                   -2.75386077674421 * 10 ** -29,
                   -5.63199253391666 * 10 ** 5,
                   -3.26068646279314 * 10 ** 20,
                   3.97949001553184 * 10 ** 13,
                   1.00824008584757 * 10 ** -7,
                   1.62234569738433 * 10 ** 4,
                   -4.32355225319745 * 10 ** 10,
                   -5.92874245598610 * 10 ** 11,
                   1.33061647281106,
                   1.57338197797544 * 10 ** 6,
                   2.58189614270853 * 10 ** 13,
                   2.62413209706358 * 10 ** 24,
                   -9.20011937431142 * 10 ** -2,
                   2.20213765905426 * 10 ** -3,
                   -1.10433759109547 * 10 ** 1,
                   8.47004870612087 * 10 ** 6,
                   -5.92910695762536 * 10 ** 8,
                   -1.83027173269660 * 10 ** -5,
                   1.81339603516302 * 10 ** -1,
                   -1.19228759669889 * 10 ** 3,
                   4.30867658061468 * 10 ** 6
                   ]
            a3x = 0.910
            b3x = 0.988
            c3x = 1
            d3x = 1
            e3x = 1
            Пи3x = PST(T) / 23
            Тета3x = T / 650
            for i in range(0, len(n3x)):
                v += n3x[i] * (((Пи3x - a3x) ** c3x) ** I3x[i]) * (((Тета3x - b3x) ** d3x) ** J3x[i])
            v = 0.0049 * v ** e3x
        if 21.90096265 < PST(T):
            I3z = [-8,
                   -6,
                   -5,
                   -5,
                   -4,
                   -4,
                   -4,
                   -3,
                   -3,
                   -3,
                   -2,
                   -1,
                   0,
                   1,
                   2,
                   3,
                   3,
                   6,
                   6,
                   6,
                   6,
                   8,
                   8
                   ]
            J3z = [3,
                   6,
                   6,
                   8,
                   5,
                   6,
                   8,
                   -2,
                   5,
                   6,
                   2,
                   -6,
                   3,
                   1,
                   6,
                   -6,
                   -2,
                   -6,
                   -5,
                   -4,
                   -1,
                   -8,
                   -4
                   ]
            n3z = [2.4400789229065 * 10 ** -11,
                   -4.6305743033124 * 10 ** 6,
                   7.2880327477771 * 10 ** 9,
                   3.2777630285886 * 10 ** 15,
                   -1.1059817011841 * 10 ** 19,
                   -3.2389991572996 * 10 ** 12,
                   9.2381400702325 * 10 ** 15,
                   8.4225008041371 * 10 ** -13,
                   6.6322143624551 * 10 ** 11,
                   -1.6717018667214 * 10 ** 14,
                   2.5374935870139 * 10 ** 3,
                   -8.1973155961052 * 10 ** -21,
                   3.2838058789066 * 10 ** 11,
                   -6.2500479117154 * 10 ** 7,
                   8.0319795746202 * 10 ** 20,
                   -2.0439701133835 * 10 ** -11,
                   -3.7839104705594 * 10 ** 3,
                   9.7287654593862 * 10 ** -3,
                   1.5435572168146 * 10 ** 1,
                   -3.7396286292864 * 10 ** 3,
                   -6.8285901137457 * 10 ** 10,
                   -2.4848801561454 * 10 ** -4,
                   3.9453604949707 * 10 ** 6
                   ]
            a3z = 0.993
            b3z = 0.994
            c3z = 1
            d3z = 1
            e3z = 4
            Пи3z = PST(T) / 22
            Тета3z = T / 650
            for i in range(0, len(n3z)):
                v += n3z[i] * (((Пи3z - a3z) ** c3z) ** I3z[i]) * (((Тета3z - b3z) ** d3z) ** J3z[i])
            v = 0.0038 * v ** e3z
        r = 1 / v
        ТАУ = 647.096 / T
        Дельта = r / 322
        I3 = [0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              6,
              6,
              6,
              7,
              8,
              9,
              9,
              10,
              10,
              11]
        J3 = [0,
              1,
              2,
              7,
              10,
              12,
              23,
              2,
              6,
              15,
              17,
              0,
              2,
              6,
              7,
              22,
              26,
              0,
              2,
              4,
              16,
              26,
              0,
              2,
              4,
              26,
              1,
              3,
              26,
              0,
              2,
              26,
              2,
              26,
              2,
              26,
              0,
              1,
              26
              ]
        n3 = [- 0.15732845290239 * 10 ** 2,
              0.20944396974307 * 10 ** 2,
              -0.76867707878716 * 10 ** 1,
              0.26185947787954 * 10 ** 1,
              -0.28080781148620 * 10 ** 1,
              0.12053369696517 * 10 ** 1,
              -0.84566812812502 * 10 ** -2,
              - 0.12654315477714 * 10 ** 1,
              - 0.11524407806681 * 10 ** 1,
              0.88521043984318,
              - 0.64207765181607,
              0.38493460186671,
              - 0.85214708824206,
              0.48972281541877 * 10 ** 1,
              - 0.30502617256965 * 10 ** 1,
              0.39420536879154 * 10 ** -1,
              0.12558408424308,
              - 0.27999329698710,
              0.13899799569460 * 10 ** 1,
              - 0.20189915023570 * 10 ** 1,
              - 0.82147637173963 * 10 ** -2,
              - 0.47596035734923,
              0.43984074473500 * 10 ** -1,
              - 0.44476435428739,
              0.90572070719733,
              0.70522450087967,
              0.10770512626332,
              - 0.32913623258954,
              - 0.50871062041158,
              - 0.22175400873096 * 10 ** -1,
              0.94260751665092 * 10 ** -1,
              0.16436278447961,
              - 0.13503372241348 * 10 ** -1,
              - 0.14834345352472 * 10 ** -1,
              0.57922953628084 * 10 ** -3,
              0.32308904703711 * 10 ** -2,
              0.80964802996215 * 10 ** -4,
              - 0.16557679795037 * 10 ** -3,
              - 0.449238990618 * 10 ** -4,
              ]
        ФиДельта = 0.0
        ФиТау = 0.0
        for i in range(0, len(n3)):
            ФиДельта += n3[i] * I3[i] * (Дельта ** (I3[i] - 1)) * ТАУ ** (J3[i])
            ФиТау += n3[i] * J3[i] * (Дельта ** I3[i]) * ТАУ ** (J3[i] - 1)
        ФиДельта = (0.10658070028513 * 10 ** 1 / Дельта) + ФиДельта
        h = R * T * (ТАУ * ФиТау + Дельта * ФиДельта)  # ВЫХОДНОЕ ЗНАЧЕНИЕ
        return h


# Функция определения удельной энтропии ВОДЫ (S, КДж/кг*K) как зависимость от температуры (Т, К) на линии насыщения
def SSWT(T):
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    R = 0.461526
    v = 0.0
    ГаммаТау = 0.0
    Гамма = 0.0
    if T == 647.096:
        return 4.41202148223476
    if T <= 623.15:
        I1 = [0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              4,
              4,
              4,
              5,
              8,
              8,
              21,
              23,
              29,
              30,
              31,
              32
              ]
        J1 = [-2,
              -1,
              0,
              1,
              2,
              3,
              4,
              5,
              -9,
              -7,
              -1,
              0,
              1,
              3,
              -3,
              0,
              1,
              3,
              17,
              -4,
              0,
              6,
              -5,
              -2,
              10,
              -8,
              -11,
              -6,
              -29,
              -31,
              -38,
              -39,
              -40,
              -41,
              ]
        n1 = [0.14632971213167,
              -0.84548187169114,
              -3.756360367204,
              3.3855169168385,
              -0.95791963387872,
              0.15772038513228,
              -0.016616417199501,
              0.00081214629983568,
              0.00028319080123804,
              -0.00060706301565874,
              -0.018990068218419,
              -0.032529748770505,
              -0.021841717175414,
              -5.283835796993 * 10 ** (-5),
              -0.00047184321073267,
              -0.00030001780793026,
              4.7661393906987 * 10 ** (-5),
              -4.4141845330846 * 10 ** (-6),
              -7.2694996297594 * 10 ** (-16),
              -3.1679644845054 * 10 ** (-5),
              -2.8270797985312 * 10 ** (-6),
              -8.5205128120103 * 10 ** (-10),
              -2.2425281908 * 10 ** (-6),
              -6.5171222895601 * 10 ** (-7),
              -1.4341729937924 * 10 ** (-13),
              -4.0516996860117 * 10 ** (-7),
              -1.2734301741641 * 10 ** (-9),
              -1.7424871230634 * 10 ** (-10),
              -6.8762131295531 * 10 ** (-19),
              1.4478307828521 * 10 ** (-20),
              2.6335781662795 * 10 ** (-23),
              -1.1947622640071 * 10 ** (-23),
              1.8228094581404 * 10 ** (-24),
              -9.3537087292458 * 10 ** (-26),
              ]
        Пи1 = PST(T) / 16.53
        Тау1 = 1386 / T
        for i in range(0, len(n1)):
            ГаммаТау += n1[i] * ((7.1 - Пи1) ** I1[i]) * J1[i] * ((Тау1 - 1.222) ** (J1[i] - 1))
            Гамма += n1[i] * ((7.1 - Пи1) ** I1[i]) * ((Тау1 - 1.222) ** J1[i])
        s = R * (Тау1 * ГаммаТау - Гамма)
        return s
    if 623.15 < T < 647.096:
        if PST(623.15) < PST(T) < 19.0881189173929:
            I3c = [-12,
                   -12,
                   -12,
                   -10,
                   -10,
                   -10,
                   -8,
                   -8,
                   -8,
                   -6,
                   -5,
                   -5,
                   -5,
                   -4,
                   -4,
                   -3,
                   -3,
                   -2,
                   -2,
                   -2,
                   -1,
                   -1,
                   -1,
                   0,
                   0,
                   0,
                   1,
                   1,
                   2,
                   2,
                   2,
                   2,
                   3,
                   3,
                   8
                   ]
            J3c = [6,
                   8,
                   10,
                   6,
                   8,
                   10,
                   5,
                   6,
                   7,
                   8,
                   1,
                   4,
                   7,
                   2,
                   8,
                   0,
                   3,
                   0,
                   4,
                   5,
                   0,
                   1,
                   2,
                   0,
                   1,
                   2,
                   0,
                   2,
                   0,
                   1,
                   3,
                   7,
                   0,
                   7,
                   1
                   ]
            n3c = [3.11967788763030,
                   2.76713458847564 * 10 ** 4,
                   3.22583103403269 * 10 ** 7,
                   -3.42416065095363 * 10 ** 2,
                   -8.99732529907377 * 10 ** 5,
                   -7.93892049821251 * 10 ** 7,
                   9.53193003217388 * 10 ** 1,
                   2.29784742345072 * 10 ** 3,
                   1.75336675322499 * 10 ** 5,
                   7.91214365222792 * 10 ** 6,
                   3.19933345844209 * 10 ** (-5),
                   -6.59508863555767 * 10 ** 1,
                   -8.33426563212851 * 10 ** 5,
                   6.45734680583292 * 10 ** (-2),
                   -3.82031020570813 * 10 ** 6,
                   4.06398848470079 * 10 ** (-5),
                   3.10327498492008 * 10 ** 1,
                   -8.92996718483724 * 10 ** (-4),
                   2.34604891591616 * 10 ** 2,
                   3.77515668966951 * 10 ** 3,
                   1.58646812591361 * 10 ** (-2),
                   7.07906336241843 * 10 ** (-1),
                   1.26016225146570 * 10 ** 1,
                   7.36143655772152 * 10 ** (-1),
                   6.76544268999101 * 10 ** (-1),
                   -1.78100588189137 * 10 ** 1,
                   -1.56531975531713 * 10 ** (-1),
                   1.17707430048158 * 10 ** 1,
                   8.40143653860447 * 10 ** (-2),
                   -1.86442467471949 * 10 ** (-1),
                   -4.40170203949645 * 10 ** 1,
                   1.23290423502494 * 10 ** 6,
                   -2.40650039730845 * 10 ** (-2),
                   -1.07077716660869 * 10 ** 6,
                   4.38319858566475 * 10 ** (-2)
                   ]
            a3c = 0.259
            b3c = 0.903
            c3c = 1
            d3c = 1
            e3c = 1
            Пи3с = PST(T) / 40
            Тета3с = T / 690
            for i in range(0, len(n3c)):
                v += n3c[i] * (((Пи3с - a3c) ** c3c) ** I3c[i]) * (((Тета3с - b3c) ** d3c) ** J3c[i])
            v = 0.0022 * v ** e3c
        if 19.0881189173929 < PST(T) < PST(643.15):
            I3s = [-12,
                   -12,
                   -10,
                   -8,
                   -6,
                   -5,
                   -5,
                   -4,
                   -4,
                   -3,
                   -3,
                   -2,
                   -1,
                   -1,
                   -1,
                   0,
                   0,
                   0,
                   0,
                   1,
                   1,
                   3,
                   3,
                   3,
                   4,
                   4,
                   4,
                   5,
                   14
                   ]
            J3s = [20,
                   24,
                   22,
                   14,
                   36,
                   8,
                   16,
                   6,
                   32,
                   3,
                   8,
                   4,
                   1,
                   2,
                   3,
                   0,
                   1,
                   4,
                   28,
                   0,
                   32,
                   0,
                   1,
                   2,
                   3,
                   18,
                   24,
                   4,
                   24
                   ]
            n3s = [-5.32466612140254 * 10 ** 22,
                   1.00415480000824 * 10 ** 31,
                   -1.91540001821367 * 10 ** 29,
                   1.05618377808847 * 10 ** 16,
                   2.02281884477061 * 10 ** 58,
                   8.84585472596134 * 10 ** 7,
                   1.66540181638363 * 10 ** 22,
                   -3.13563197669111 * 10 ** 5,
                   -1.85662327545324 * 10 ** 53,
                   -6.24942093918942 * 10 ** -2,
                   -5.04160724132590 * 10 ** 9,
                   1.87514491833092 * 10 ** 4,
                   1.21399979993217 * 10 ** -3,
                   1.88317043049455,
                   -1.67073503962060 * 10 ** 3,
                   9.65961650599775 * 10 ** -1,
                   2.94885696802488,
                   -6.53915627346115 * 10 ** +4,
                   6.04012200163444 * 10 ** +49,
                   -1.98339358557937 * 10 ** -1,
                   -1.75984090163501 * 10 ** 57,
                   3.56314881403987,
                   -5.75991255144384 * 10 ** 2,
                   4.56213415338071 * 10 ** 4,
                   -1.09174044987829 * 10 ** 7,
                   4.37796099975134 * 10 ** 33,
                   -6.16552611135792 * 10 ** 45,
                   1.93568768917797 * 10 ** 9,
                   9.50898170425042 * 10 ** 53
                   ]
            a3s = 0.886
            b3s = 0.990
            c3s = 1
            d3s = 1
            e3s = 4
            Пи3s = PST(T) / 21
            Тета3s = T / 640
            for i in range(0, len(n3s)):
                v += n3s[i] * (((Пи3s - a3s) ** c3s) ** I3s[i]) * (((Тета3s - b3s) ** d3s) ** J3s[i])
            v = 0.0022 * v ** e3s
        if PST(643.15) < PST(T) < 21.93161551:
            I3u = [-12,
                   -10,
                   -10,
                   -10,
                   -8,
                   -8,
                   -8,
                   -6,
                   -6,
                   -5,
                   -5,
                   -5,
                   -3,
                   -1,
                   -1,
                   -1,
                   -1,
                   0,
                   0,
                   1,
                   2,
                   2,
                   3,
                   5,
                   5,
                   5,
                   6,
                   6,
                   8,
                   8,
                   10,
                   12,
                   12,
                   12,
                   14,
                   14,
                   14,
                   14
                   ]
            J3u = [14,
                   10,
                   12,
                   14,
                   10,
                   12,
                   14,
                   8,
                   12,
                   4,
                   8,
                   12,
                   2,
                   -1,
                   1,
                   12,
                   14,
                   -3,
                   1,
                   -2,
                   5,
                   10,
                   -5,
                   -4,
                   2,
                   3,
                   -5,
                   2,
                   -8,
                   8,
                   -4,
                   -12,
                   -4,
                   4,
                   -12,
                   -10,
                   -6,
                   6
                   ]
            n3u = [1.22088349258355 * 10 ** 17,
                   1.04216468608488 * 10 ** 9,
                   -8.82666931564652 * 10 ** 15,
                   2.59929510849499 * 10 ** 19,
                   2.22612779142211 * 10 ** 14,
                   -8.78473585050085 * 10 ** 17,
                   -3.14432577551552 * 10 ** 21,
                   -2.16934916996285 * 10 ** 12,
                   1.59079648196849 * 10 ** 20,
                   -3.39567617303423 * 10 ** 2,
                   8.84387651337836 * 10 ** 12,
                   -8.43405926846418 * 10 ** 20,
                   1.14178193518022 * 10 ** 1,
                   -1.22708229235641 * 10 ** -4,
                   -1.06201671767107 * 10 ** 2,
                   9.03443213959313 * 10 ** 24,
                   -6.93996270370852 * 10 ** 27,
                   6.48916718965575 * 10 ** -9,
                   7.18957567127851 * 10 ** 3,
                   1.05581745346187 * 10 ** -3,
                   -6.51903203602581 * 10 ** 14,
                   -1.60116813274676 * 10 ** 24,
                   -5.10254294237837 * 10 ** -9,
                   -1.52355388953402 * 10 ** -1,
                   6.77143292290144 * 10 ** 11,
                   2.76378438378930 * 10 ** 14,
                   1.16862983141686 * 10 ** -2,
                   -3.01426947980171 * 10 ** 13,
                   1.69719813884840 * 10 ** -8,
                   1.04674840020929 * 10 ** 26,
                   -1.08016904560140 * 10 ** 4,
                   -9.90623601934295 * 10 ** -13,
                   5.36116483602738 * 10 ** 6,
                   2.26145963747881 * 10 ** 21,
                   -4.88731565776210 * 10 ** -10,
                   1.51001548880670 * 10 ** -5,
                   -2.27700464643920 * 10 ** 4,
                   -7.81754507698846 * 10 ** 27
                   ]
            a3u = 0.902
            b3u = 0.988
            c3u = 1
            d3u = 1
            e3u = 1
            Пи3u = PST(T) / 23
            Тета3u = T / 650
            for i in range(0, len(n3u)):
                v += n3u[i] * (((Пи3u - a3u) ** c3u) ** I3u[i]) * (((Тета3u - b3u) ** d3u) ** J3u[i])
            v = 0.0026 * v ** e3u
        if 21.93161551 < PST(T):
            I3y = [0,
                   0,
                   0,
                   0,
                   1,
                   2,
                   2,
                   2,
                   2,
                   3,
                   3,
                   3,
                   4,
                   4,
                   5,
                   5,
                   8,
                   8,
                   10,
                   12
                   ]
            J3y = [-3,
                   1,
                   5,
                   8,
                   8,
                   -4,
                   -1,
                   4,
                   5,
                   -8,
                   4,
                   8,
                   -6,
                   6,
                   -2,
                   1,
                   -8,
                   -2,
                   -5,
                   -8
                   ]
            n3y = [-5.25597995024633 * 10 ** -10,
                   5.83441305228407 * 10 ** 3,
                   -1.34778968457925 * 10 ** 16,
                   1.18973500934212 * 10 ** 25,
                   -1.59096490904708 * 10 ** 26,
                   -3.15839902302021 * 10 ** -7,
                   4.96212197158239 * 10 ** 2,
                   3.27777227273171 * 10 ** 18,
                   -5.27114657850696 * 10 ** 21,
                   2.10017506281863 * 10 ** -17,
                   7.05106224399834 * 10 ** 20,
                   -2.66713136106469 * 10 ** 30,
                   -1.45370512554562 * 10 ** -8,
                   1.49333917053130 * 10 ** 27,
                   -1.49795620287641 * 10 ** 7,
                   -3.81881906271100 * 10 ** 15,
                   7.24660165585797 * 10 ** -5,
                   -9.37808169550193 * 10 ** 13,
                   5.14411468376383 * 10 ** 9,
                   -8.28198594040141 * 10 ** 4
                   ]
            a3y = 0.996
            b3y = 0.994
            c3y = 1
            d3y = 1
            e3y = 4
            Пи3y = PST(T) / 22
            Тета3y = T / 650
            for i in range(0, len(n3y)):
                v += n3y[i] * (((Пи3y - a3y) ** c3y) ** I3y[i]) * (((Тета3y - b3y) ** d3y) ** J3y[i])
            v = 0.0031 * v ** e3y
        r = 1 / v
        ТАУ = 647.096 / T
        Дельта = r / 322
        I2 = [0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              6,
              6,
              6,
              7,
              8,
              9,
              9,
              10,
              10,
              11]
        J2 = [0,
              1,
              2,
              7,
              10,
              12,
              23,
              2,
              6,
              15,
              17,
              0,
              2,
              6,
              7,
              22,
              26,
              0,
              2,
              4,
              16,
              26,
              0,
              2,
              4,
              26,
              1,
              3,
              26,
              0,
              2,
              26,
              2,
              26,
              2,
              26,
              0,
              1,
              26
              ]
        n2 = [- 0.15732845290239 * 10 ** 2,
              0.20944396974307 * 10 ** 2,
              -0.76867707878716 * 10 ** 1,
              0.26185947787954 * 10 ** 1,
              -0.28080781148620 * 10 ** 1,
              0.12053369696517 * 10 ** 1,
              -0.84566812812502 * 10 ** -2,
              - 0.12654315477714 * 10 ** 1,
              - 0.11524407806681 * 10 ** 1,
              0.88521043984318,
              - 0.64207765181607,
              0.38493460186671,
              - 0.85214708824206,
              0.48972281541877 * 10 ** 1,
              - 0.30502617256965 * 10 ** 1,
              0.39420536879154 * 10 ** -1,
              0.12558408424308,
              - 0.27999329698710,
              0.13899799569460 * 10 ** 1,
              - 0.20189915023570 * 10 ** 1,
              - 0.82147637173963 * 10 ** -2,
              - 0.47596035734923,
              0.43984074473500 * 10 ** -1,
              - 0.44476435428739,
              0.90572070719733,
              0.70522450087967,
              0.10770512626332,
              - 0.32913623258954,
              - 0.50871062041158,
              - 0.22175400873096 * 10 ** -1,
              0.94260751665092 * 10 ** -1,
              0.16436278447961,
              - 0.13503372241348 * 10 ** -1,
              - 0.14834345352472 * 10 ** -1,
              0.57922953628084 * 10 ** -3,
              0.32308904703711 * 10 ** -2,
              0.80964802996215 * 10 ** -4,
              - 0.16557679795037 * 10 ** -3,
              - 0.449238990618 * 10 ** -4,
              ]
        ФиДельта = 0.0
        ФиТау = 0.0
        for i in range(0, len(n2)):
            ФиДельта += n2[i] * (Дельта ** I2[i]) * (ТАУ ** (J2[i]))
            ФиТау += n2[i] * J2[i] * (Дельта ** I2[i]) * ТАУ ** (J2[i] - 1)
        ФиДельта = (0.10658070028513 * 10 ** 1 * log1p(Дельта - 1)) + ФиДельта
        s = R * (ТАУ * ФиТау - ФиДельта)  # ВЫХОДНОЕ ЗНАЧЕНИЕ
        return s


# Функция определения удельной энтропии ПАРА (S, КДж/кг*K) как зависимость от температуры (Т, К) на линии насыщения
def SSST(T):
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    R = 0.461526
    v = 0.0
    Гаммаr = 0.0
    Гамма0 = 0.0
    ГаммаrТАУ = 0.0
    Гамма0ТАУ = 0.0
    if T == 647.096:
        return 4.41202148223476
    if T <= 623.15:
        Пи = PST(T)
        Тау = 540 / T
        J0 = [0.0,
              1.0,
              -5.0,
              -4.0,
              -3.0,
              -2.0,
              -1.0,
              2.0,
              3.0
              ]
        n0 = [-0.96927686500217 * (10 ** 1)
            , 0.10086655968018 * (10 ** 2)
            , -0.56087911283020 * (10 ** -2),
              0.71452738081455 * (10 ** -1),
              -0.40710498223928,
              0.14240819171444 * 10,
              -0.43839511319450 * 10,
              -0.28408632460772,
              0.21268463753307 * (10 ** -1)
              ]
        I = [1,
             1,
             1,
             1,
             1,
             2,
             2,
             2,
             2,
             2,
             3,
             3,
             3,
             3,
             3,
             4,
             4,
             4,
             5,
             6,
             6,
             6,
             7,
             7,
             7,
             8,
             8,
             9,
             10,
             10,
             10,
             16,
             16,
             18,
             20,
             20,
             20,
             21,
             22,
             23,
             24,
             24,
             24]
        J = [0,
             1,
             2,
             3,
             6,
             1,
             2,
             4,
             7,
             36,
             0,
             1,
             3,
             6,
             35,
             1,
             2,
             3,
             7,
             3,
             16,
             35,
             0,
             11,
             25,
             8,
             36,
             13,
             4,
             10,
             14,
             29,
             50,
             57,
             20,
             35,
             48,
             21,
             53,
             39,
             26,
             40,
             58]
        n1 = [-0.17731742473213 * 10 ** -2,
              -0.17834862292358 * 10 ** -1,
              -0.45996013696365 * 10 ** -1,
              -0.57581259083432 * 10 ** -1,
              -0.50325278727930 * 10 ** -1,
              -0.33032641670203 * 10 ** -4,
              -0.18948987516315 * 10 ** -3,
              -0.39392777243355 * 10 ** -2,
              -0.43797295650573 * 10 ** -1,
              -0.26674547914087 * 10 ** -4,
              0.20481737692309 * 10 ** -7,
              0.43870667284435 * 10 ** -6,
              -0.32277677238570 * 10 ** -4,
              -0.15033924542148 * 10 ** -2,
              -0.40668253562649 * 10 ** -1,
              -0.78847309559367 * 10 ** -9,
              0.12790717852285 * 10 ** -7,
              0.48225372718507 * 10 ** -6,
              0.22922076337661 * 10 ** -5,
              -0.16714766451061 * 10 ** -10,
              -0.21171472321355 * 10 ** -2,
              -0.23895741934104 * 10 ** 2,
              -0.59059564324270 * 10 ** -17,
              -0.12621808899101 * 10 ** -5,
              -0.38946842435739 * 10 ** -1,
              0.11256211360459 * 10 ** -10,
              -0.82311340897998 * 10 ** 1,
              0.19809712802088 * 10 ** -7,
              0.10406965210174 * 10 ** -18,
              -0.10234747095929 * 10 ** -12,
              -0.10018179379511 * 10 ** -8,
              -0.80882908646985 * 10 ** -10,
              0.10693031879409,
              -0.33662250574171,
              0.89185845355421 * 10 ** -24,
              0.30629316876232 * 10 ** -12,
              -0.42002467698208 * 10 ** -5,
              -0.59056029685639 * 10 ** -25,
              0.37826947613457 * 10 ** -5,
              -0.12768608934681 * 10 ** -14,
              0.73087610595061 * 10 ** -28,
              0.55414715350778 * 10 ** -16,
              -0.94369707241210 * 10 ** -6]
        for i in range(0, len(n0)):
            Гамма0 += n0[i] * Тау ** J0[i]
            Гамма0ТАУ += n0[i] * J0[i] * Тау ** (J0[i] - 1)
        Гамма0 = Гамма0 + log1p(Пи - 1)
        for i in range(0, len(n1)):
            Гаммаr += n1[i] * Пи ** I[i] * ((Тау - 0.5) ** J[i])
            ГаммаrТАУ += n1[i] * J[i] * Пи ** I[i] * ((Тау - 0.5) ** (J[i] - 1))
        s = R * (Тау * (Гамма0ТАУ + ГаммаrТАУ) - (Гамма0 + Гаммаr))
        return s
    if 623.15 < T < 647.096:
        if 20.5 < PST(T) < PST(643.15):
            I3r = [-8,
                   -8,
                   -3,
                   -3,
                   -3,
                   -3,
                   -3,
                   0,
                   0,
                   0,
                   0,
                   3,
                   3,
                   8,
                   8,
                   8,
                   8,
                   10,
                   10,
                   10,
                   10,
                   10,
                   10,
                   10,
                   10,
                   12,
                   14
                   ]
            J3r = [6,
                   14,
                   -3,
                   3,
                   4,
                   5,
                   8,
                   -1,
                   0,
                   1,
                   5,
                   -6,
                   -2,
                   -12,
                   -10,
                   -8,
                   -5,
                   -12,
                   -10,
                   -8,
                   -6,
                   -5,
                   -4,
                   -3,
                   -2,
                   -12,
                   -12
                   ]
            n3r = [1.44165955660863 * 10 ** -3,
                   -7.01438599628258 * 10 ** 12,
                   -8.30946716459219 * 10 ** -17,
                   2.61975135368109 * 10 ** -1,
                   3.93097214706245 * 10 ** 2,
                   -1.04334030654021 * 10 ** 4,
                   4.90112654154211 * 10 ** 8,
                   -1.47104222772069 * 10 ** -4,
                   1.03602748043408,
                   3.05308890065089,
                   -3.99745276971264 * 10 ** 6,
                   5.69233719593750 * 10 ** -12,
                   -4.64923504407778 * 10 ** -2,
                   -5.35400396512906 * 10 ** -18,
                   3.99988795693162 * 10 ** -13,
                   -5.36479560201811 * 10 ** -7,
                   1.59536722411202 * 10 ** -2,
                   2.70303248860217 * 10 ** -15,
                   2.44247453858506 * 10 ** -8,
                   -9.83430636716454 * 10 ** -6,
                   6.63513144224454 * 10 ** -2,
                   -9.93456957845006,
                   5.46491323528491 * 10 ** 2,
                   -1.43365406393758 * 10 ** 4,
                   1.50764974125511 * 10 ** 5,
                   -3.37209709340105 * 10 ** -10,
                   3.77501980025469 * 10 ** -9
                   ]
            a3r = 0.874
            b3r = 0.982
            c3r = 1
            d3r = 1
            e3r = 1
            Пи3r = PST(T) / 23
            Тета3r = T / 650
            for i in range(0, len(n3r)):
                v += n3r[i] * (((Пи3r - a3r) ** c3r) ** I3r[i]) * (((Тета3r - b3r) ** d3r) ** J3r[i])
            v = 0.0054 * v ** e3r
        if PST(623.15) < PST(T) < 20.5:
            I3t = [0,
                   0,
                   0,
                   0,
                   1,
                   1,
                   2,
                   2,
                   2,
                   3,
                   3,
                   4,
                   4,
                   7,
                   7,
                   7,
                   7,
                   7,
                   10,
                   10,
                   10,
                   10,
                   10,
                   18,
                   20,
                   22,
                   22,
                   24,
                   28,
                   32,
                   32,
                   32,
                   36
                   ]
            J3t = [0,
                   1,
                   4,
                   12,
                   0,
                   10,
                   0,
                   6,
                   14,
                   3,
                   8,
                   0,
                   10,
                   3,
                   4,
                   7,
                   20,
                   36,
                   10,
                   12,
                   14,
                   16,
                   22,
                   18,
                   32,
                   22,
                   36,
                   24,
                   28,
                   22,
                   32,
                   36,
                   36
                   ]
            n3t = [1.55287249586268,
                   6.64235115009031,
                   -2.89366236727210 * 10 ** 3,
                   -3.85923202309848 * 10 ** 12,
                   -2.91002915783761,
                   -8.29088246858083 * 10 ** 11,
                   1.76814899675218,
                   -5.34686695713469 * 10 ** 8,
                   1.60464608687834 * 10 ** 17,
                   1.96435366560186 * 10 ** 5,
                   1.56637427541729 * 10 ** 12,
                   -1.78154560260006,
                   -2.29746237623692 * 10 ** 15,
                   3.85659001648006 * 10 ** 7,
                   1.10554446790543 * 10 ** 9,
                   -6.77073830687349 * 10 ** 13,
                   -3.27910592086523 * 10 ** 30,
                   -3.41552040860644 * 10 ** 50,
                   -5.27251339709047 * 10 ** 20,
                   2.45375640937055 * 10 ** 23,
                   -1.68776617209269 * 10 ** 26,
                   3.58958955867578 * 10 ** 28,
                   -6.56475280339411 * 10 ** 35,
                   3.55286045512301 * 10 ** 38,
                   5.69021454413270 * 10 ** 57,
                   -7.00584546433113 * 10 ** 47,
                   -7.05772623326374 * 10 ** 64,
                   1.66861176200148 * 10 ** 52,
                   -3.00475129680486 * 10 ** 60,
                   -6.68481295196808 * 10 ** 50,
                   4.28432338620678 * 10 ** 68,
                   -4.44227367758304 * 10 ** 71,
                   -2.81396013562745 * 10 ** 76
                   ]
            a3t = 0.803
            b3t = 1.02
            c3t = 1
            d3t = 1
            e3t = 1
            Пи3t = PST(T) / 20
            Тета3t = T / 650
            for i in range(0, len(n3t)):
                v += n3t[i] * (((Пи3t - a3t) ** c3t) ** I3t[i]) * (((Тета3t - b3t) ** d3t) ** J3t[i])
            v = 0.0088 * v ** e3t
        if PST(643.15) < PST(T) < 21.90096265:
            I3x = [-8,
                   -6,
                   -5,
                   -4,
                   -4,
                   -4,
                   -3,
                   -3,
                   -1,
                   0,
                   0,
                   0,
                   1,
                   1,
                   2,
                   3,
                   3,
                   3,
                   4,
                   5,
                   5,
                   5,
                   6,
                   8,
                   8,
                   8,
                   8,
                   10,
                   12,
                   12,
                   12,
                   12,
                   14,
                   14,
                   14,
                   14
                   ]
            J3x = [14,
                   10,
                   10,
                   1,
                   2,
                   14,
                   -2,
                   12,
                   5,
                   0,
                   4,
                   10,
                   -10,
                   -1,
                   6,
                   -12,
                   0,
                   8,
                   3,
                   -6,
                   -2,
                   1,
                   1,
                   -6,
                   -3,
                   1,
                   8,
                   -8,
                   -10,
                   -8,
                   -5,
                   -4,
                   -12,
                   -10,
                   -8,
                   -6
                   ]
            n3x = [3.77373741298151 * 10 ** 18,
                   -5.07100883722913 * 10 ** 12,
                   -1.03363225598860 * 10 ** 15,
                   1.84790814320773 * 10 ** -6,
                   -9.24729378390945 * 10 ** -4,
                   -4.25999562292738 * 10 ** 23,
                   -4.62307771873973 * 10 ** -13,
                   1.07319065855767 * 10 ** 21,
                   6.48662492280682 * 10 ** 10,
                   2.44200600688281,
                   -8.51535733484258 * 10 ** 9,
                   1.69894481433592 * 10 ** 21,
                   2.15780222509020 * 10 ** -27,
                   -3.20850551367334 * 10 ** -1,
                   -3.82642448458610 * 10 ** 16,
                   -2.75386077674421 * 10 ** -29,
                   -5.63199253391666 * 10 ** 5,
                   -3.26068646279314 * 10 ** 20,
                   3.97949001553184 * 10 ** 13,
                   1.00824008584757 * 10 ** -7,
                   1.62234569738433 * 10 ** 4,
                   -4.32355225319745 * 10 ** 10,
                   -5.92874245598610 * 10 ** 11,
                   1.33061647281106,
                   1.57338197797544 * 10 ** 6,
                   2.58189614270853 * 10 ** 13,
                   2.62413209706358 * 10 ** 24,
                   -9.20011937431142 * 10 ** -2,
                   2.20213765905426 * 10 ** -3,
                   -1.10433759109547 * 10 ** 1,
                   8.47004870612087 * 10 ** 6,
                   -5.92910695762536 * 10 ** 8,
                   -1.83027173269660 * 10 ** -5,
                   1.81339603516302 * 10 ** -1,
                   -1.19228759669889 * 10 ** 3,
                   4.30867658061468 * 10 ** 6
                   ]
            a3x = 0.910
            b3x = 0.988
            c3x = 1
            d3x = 1
            e3x = 1
            Пи3x = PST(T) / 23
            Тета3x = T / 650
            for i in range(0, len(n3x)):
                v += n3x[i] * (((Пи3x - a3x) ** c3x) ** I3x[i]) * (((Тета3x - b3x) ** d3x) ** J3x[i])
            v = 0.0049 * v ** e3x
        if 21.90096265 < PST(T):
            I3z = [-8,
                   -6,
                   -5,
                   -5,
                   -4,
                   -4,
                   -4,
                   -3,
                   -3,
                   -3,
                   -2,
                   -1,
                   0,
                   1,
                   2,
                   3,
                   3,
                   6,
                   6,
                   6,
                   6,
                   8,
                   8
                   ]
            J3z = [3,
                   6,
                   6,
                   8,
                   5,
                   6,
                   8,
                   -2,
                   5,
                   6,
                   2,
                   -6,
                   3,
                   1,
                   6,
                   -6,
                   -2,
                   -6,
                   -5,
                   -4,
                   -1,
                   -8,
                   -4
                   ]
            n3z = [2.4400789229065 * 10 ** -11,
                   -4.6305743033124 * 10 ** 6,
                   7.2880327477771 * 10 ** 9,
                   3.2777630285886 * 10 ** 15,
                   -1.1059817011841 * 10 ** 19,
                   -3.2389991572996 * 10 ** 12,
                   9.2381400702325 * 10 ** 15,
                   8.4225008041371 * 10 ** -13,
                   6.6322143624551 * 10 ** 11,
                   -1.6717018667214 * 10 ** 14,
                   2.5374935870139 * 10 ** 3,
                   -8.1973155961052 * 10 ** -21,
                   3.2838058789066 * 10 ** 11,
                   -6.2500479117154 * 10 ** 7,
                   8.0319795746202 * 10 ** 20,
                   -2.0439701133835 * 10 ** -11,
                   -3.7839104705594 * 10 ** 3,
                   9.7287654593862 * 10 ** -3,
                   1.5435572168146 * 10 ** 1,
                   -3.7396286292864 * 10 ** 3,
                   -6.8285901137457 * 10 ** 10,
                   -2.4848801561454 * 10 ** -4,
                   3.9453604949707 * 10 ** 6
                   ]
            a3z = 0.993
            b3z = 0.994
            c3z = 1
            d3z = 1
            e3z = 4
            Пи3z = PST(T) / 22
            Тета3z = T / 650
            for i in range(0, len(n3z)):
                v += n3z[i] * (((Пи3z - a3z) ** c3z) ** I3z[i]) * (((Тета3z - b3z) ** d3z) ** J3z[i])
            v = 0.0038 * v ** e3z
        r = 1 / v
        ТАУ = 647.096 / T
        Дельта = r / 322
        I3 = [0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              6,
              6,
              6,
              7,
              8,
              9,
              9,
              10,
              10,
              11]
        J3 = [0,
              1,
              2,
              7,
              10,
              12,
              23,
              2,
              6,
              15,
              17,
              0,
              2,
              6,
              7,
              22,
              26,
              0,
              2,
              4,
              16,
              26,
              0,
              2,
              4,
              26,
              1,
              3,
              26,
              0,
              2,
              26,
              2,
              26,
              2,
              26,
              0,
              1,
              26
              ]
        n3 = [- 0.15732845290239 * 10 ** 2,
              0.20944396974307 * 10 ** 2,
              -0.76867707878716 * 10 ** 1,
              0.26185947787954 * 10 ** 1,
              -0.28080781148620 * 10 ** 1,
              0.12053369696517 * 10 ** 1,
              -0.84566812812502 * 10 ** -2,
              - 0.12654315477714 * 10 ** 1,
              - 0.11524407806681 * 10 ** 1,
              0.88521043984318,
              - 0.64207765181607,
              0.38493460186671,
              - 0.85214708824206,
              0.48972281541877 * 10 ** 1,
              - 0.30502617256965 * 10 ** 1,
              0.39420536879154 * 10 ** -1,
              0.12558408424308,
              - 0.27999329698710,
              0.13899799569460 * 10 ** 1,
              - 0.20189915023570 * 10 ** 1,
              - 0.82147637173963 * 10 ** -2,
              - 0.47596035734923,
              0.43984074473500 * 10 ** -1,
              - 0.44476435428739,
              0.90572070719733,
              0.70522450087967,
              0.10770512626332,
              - 0.32913623258954,
              - 0.50871062041158,
              - 0.22175400873096 * 10 ** -1,
              0.94260751665092 * 10 ** -1,
              0.16436278447961,
              - 0.13503372241348 * 10 ** -1,
              - 0.14834345352472 * 10 ** -1,
              0.57922953628084 * 10 ** -3,
              0.32308904703711 * 10 ** -2,
              0.80964802996215 * 10 ** -4,
              - 0.16557679795037 * 10 ** -3,
              - 0.449238990618 * 10 ** -4,
              ]
        ФиДельта = 0.0
        ФиТау = 0.0
        for i in range(0, len(n3)):
            ФиДельта += n3[i] * (Дельта ** I3[i]) * (ТАУ ** (J3[i]))
            ФиТау += n3[i] * J3[i] * (Дельта ** I3[i]) * ТАУ ** (J3[i] - 1)
        ФиДельта = (0.10658070028513 * 10 ** 1 * log1p(Дельта - 1)) + ФиДельта
        s = R * (ТАУ * ФиТау - ФиДельта)  # ВЫХОДНОЕ ЗНАЧЕНИЕ
        return s


# Область влажный пар
# Функция определения удельной энтальпии (h, КДж/кг) как зависимость от давления (p, МПа) и удельной энтропии (S, КДж/кг*K)
#                                                                                           в области влажного пара
def H4PS(P, S):
    # P ВХОДНОЕ ЗНАЧЕНИЕ
    # S ВХОДНОЕ ЗНАЧЕНИЕ
    T = TSP(P)
    x = (S - SSWT(T)) / (SSST(T) - SSWT(T))
    h = HSWT(T) + x * (HSST(T) - HSWT(T))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return h


# Функция определения удельной энтальпии (h, КДж/кг) как зависимость от температуры (Т, К) и удельной энтропии (S, КДж/кг*K)
#                                                                                           в области влажного пара
def H4TS(T, S):
    # S ВХОДНОЕ ЗНАЧЕНИЕ
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    x = (S - SSWT(T)) / (SSST(T) - SSWT(T))
    h = HSWT(T) + x * (HSST(T) - HSWT(T))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return h


# Функция определения удельной энтропии (S, КДж/кг*K)  как зависимость от давления (p, МПа) и удельной энтальпии (h, КДж/кг)
#                                                                                           в области влажного пара
def S4PH(P, h):
    # P ВХОДНОЕ ЗНАЧЕНИЕ
    # h ВХОДНОЕ ЗНАЧЕНИЕ
    T = TSP(P)
    x = (h - HSWT(T)) / (HSST(T) - HSWT(T))
    s = SSWT(T) + x * (SSST(T) - SSWT(T))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return s


# Функция определения удельной энтропии (S, КДж/кг*K) как зависимость от температуры (Т, К) и удельной энтальпии (h, КДж/кг)
#                                                                                           в области влажного пара
def S4TH(T, h):
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    # h ВХОДНОЕ ЗНАЧЕНИЕ
    x = (h - HSWT(T)) / (HSST(T) - HSWT(T))
    s = SSWT(T) + x * (SSST(T) - SSWT(T))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return h


# Область жидкости
# Функция определения удельной энтальпии (h, КДж/кг) как зависимость от давления (p, МПа) и температуры (Т, К)
#                                                                                                  в области жидкости
def H1PT(P, T):
    # P ВХОДНОЕ ЗНАЧЕНИЕ
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    p = P / 16.53  # относительное давление
    y: float = 0  # по расчету гамма 0 tay - Свободная энергия Гиббса, идеальная часть
    t = 1386 / T  # tay
    r = 0.461526  # КДж/кг*К универсальная газовая постоянная

    # Расчет идеальной составляющей энергии Гиббса

    i = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32]
    j = [-2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0, 1, 3, -3, 0, 1, 3, 17, -4, 0, 6, -5, -2, 10, -8, -11, -6, -29, -31,
         -38, -39, -40, -41]
    n = [0.14632971213167, -0.84548187169114, -3.7563603672040, 3.3855169168385, -0.95791963387872, 0.15772038513228,
         -0.16616417199501 * 10 ** (-1), 0.81214629983568 * 10 ** (-3), 0.28319080123804 * 10 ** (-3),
         -0.60706301565874 * 10 ** (-3),
         -0.18990068218419 * 10 ** (-1), -0.32529748770505 * 10 ** (-1), -0.21841717175414 * 10 ** (-1),
         -0.52838357969930 * 10 ** (-4),
         -0.47184321073267 * 10 ** (-3), -0.30001780793026 * 10 ** (-3), 0.47661393906987 * 10 ** (-4),
         -0.44141845330846 * 10 ** (-5),
         -0.72694996297594 * 10 ** (-15), -0.31679644845054 * 10 ** (-4), -0.28270797985312 * 10 ** (-5),
         -0.85205128120103 * 10 ** (-9), -0.22425281908000 * 10 ** (-5), -0.65171222895601 * 10 ** (-6),
         -0.14341729937924 * 10 ** (-12), -0.40516996860117 * 10 ** (-6), -0.12734301741641 * 10 ** (-8),
         -0.17424871230634 * 10 ** (-9), -0.68762131295531 * 10 ** (-18), -0.14478307828521 * 10 ** (-19),
         0.26335781662795 * 10 ** (-22), -0.11947622640071 * 10 ** (-22), 0.18228094581404 * 10 ** (-23),
         -0.93537087292458 * 10 ** (-25)]

    for k in range(0, len(n)):
        y += n[k] * (7.1 - p) ** i[k] * j[k] * (t - 1.222) ** (j[k] - 1)

    H1 = r * T * t * y  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return H1


# Функция определения удельного объема водяного пара (V, м^3/кг) как зависимость от давления (p, МПа) и
#                                                                        температуры (Т, К) в области жидкости
def V1PT(P, T):
    # P ВХОДНОЕ ЗНАЧЕНИЕ
    # T ВХОДНОЕ ЗНАЧЕНИЕ
    p = P / 16.53  # относительное давление
    y: float = 0  # по расчету гамма 0 ПИ - Свободная энергия Гиббса, идеальная часть
    t = 1386 / T  # tay
    r = 0.461526  # КДж/кг*К универсальная газовая постоянная

    # Расчет идеальной составляющей энергии Гиббса

    i = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32]
    j = [-2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0, 1, 3, -3, 0, 1, 3, 17, -4, 0, 6, -5, -2, 10, -8, -11, -6, -29, -31,
         -38, -39, -40, -41]
    n = [0.14632971213167, -0.84548187169114, -3.7563603672040, 3.3855169168385, -0.95791963387872, 0.15772038513228,
         -0.16616417199501 * 10 ** (-1), 0.81214629983568 * 10 ** (-3), 0.28319080123804 * 10 ** (-3),
         -0.60706301565874 * 10 ** (-3),
         -0.18990068218419 * 10 ** (-1), -0.32529748770505 * 10 ** (-1), -0.21841717175414 * 10 ** (-1),
         -0.52838357969930 * 10 ** (-4),
         -0.47184321073267 * 10 ** (-3), -0.30001780793026 * 10 ** (-3), 0.47661393906987 * 10 ** (-4),
         -0.44141845330846 * 10 ** (-5),
         -0.72694996297594 * 10 ** (-15), -0.31679644845054 * 10 ** (-4), -0.28270797985312 * 10 ** (-5),
         -0.85205128120103 * 10 ** (-9), -0.22425281908000 * 10 ** (-5), -0.65171222895601 * 10 ** (-6),
         -0.14341729937924 * 10 ** (-12), -0.40516996860117 * 10 ** (-6), -0.12734301741641 * 10 ** (-8),
         -0.17424871230634 * 10 ** (-9), -0.68762131295531 * 10 ** (-18), -0.14478307828521 * 10 ** (-19),
         0.26335781662795 * 10 ** (-22), -0.11947622640071 * 10 ** (-22), 0.18228094581404 * 10 ** (-23),
         -0.93537087292458 * 10 ** (-25)]

    for k in range(0, len(n)):
        y += - n[k] * i[k] * (7.1 - p) ** (i[k] - 1) * (t - 1.222) ** j[k]

    V1 = r * T * y / 16.53 * (10 ** (-3))  # ВЫХОДНОЕ ЗНАЧЕНИЕ
    return V1


# Общие функции
def HPT(P, T):
    if float(HSST(T)) < float(H2PT(P, T)):
        return H2PT(P, T)
    elif HSST(T) == HSST(TSP(P)):
        return HSST(T)
    elif HSWT(T) == HSWT(TSP(P)):
        return HSWT(T)
    elif HSWT(T) > H1PT(P, T):
        return H1PT(P, T)
    else:
        return print("это область влажного пара нельзя определить параметры по данным переменным")

def WSP(args: list):
    # # Расчёт цилиндра турбины
    # G_вход = 116.57
    # P_вход_цилиндра = 2.53
    # t_вход_цилинда = 539
    # P_выход_цилиндра = 0.24
    # этта_цилиндра = 0.935
    # P_отбор = [1.376, 1.376, 0.24]
    # G_отбор = [6.303, 10.89, 5.11]

    G_вход              = args[0]
    P_вход_цилиндра     = args[1]
    t_вход_цилинда      = args[2]
    P_выход_цилиндра    = args[3]
    этта_цилиндра       = args[4]
    P_отбор             = args[5]
    G_отбор             = args[6]

# Блок входных параметров

#P_вход_цилиндра = float(input('Введите значение давления перед частью турбины, МПа: '))
#t_вход_цилинда = float(input('Введите значение температуры перед частью турбины, °С: '))
#этта_цилиндра = float(input('Введите значение КПД части турбины в долях: '))
#P_выход_цилиндра = float(input('Введите значение давления на выходе из части турбины, МПа: '))
#G_вход = float(input('Введите значение расхода пара в голову части турбины, кг/с: '))
#N_отбор = int(input('Введите количество отборов в цилиндре турбины, шт.: '))
#G_отбор = []
#P_отбор = []
#for i in range(0, N_отбор):
#    g_i = input(f'Введите значение расхода пара в {i + 1} отборе, кг/с: ')
#    p_i = input(f'Введите значение давления пара в {i + 1} отборе, МПа: ')
#    G_отбор.append(g_i)
#    P_отбор.append(p_i)

    # Конец блока входных параметров

    # значения теплофических параметров на входе в турбину
    h_вход_цилинда = H2PT(P_вход_цилиндра, t_вход_цилинда + 273.15)
    s_вход_цилинда = S2PT(P_вход_цилиндра, t_вход_цилинда + 273.15)

    # определение выходных параметров цилиндра
    h_выход_цилинда_теор = H2PT(P_выход_цилиндра, T2PS(P_выход_цилиндра, s_вход_цилинда))
    h_выход_цилинда_реал = h_вход_цилинда - (h_вход_цилинда - h_выход_цилинда_теор) * этта_цилиндра
    s_выход_цилинда_реал = S2PT(P_выход_цилиндра, T2PH(P_выход_цилиндра, h_выход_цилинда_реал))
    t_выход_цилинда_реал = T2PH(P_выход_цилиндра, h_выход_цилинда_реал)

    # определение массивов под параметры отборов
    h_отбор_теор_массив = []
    h_отбор_реал_массив = []
    s_отбор_реал_массив = []
    t_отбор_реал_массив = []

    # нахождение параметров отбора
    for i in range(len(P_отбор)):
        h_отбор_теор_массив.append(H2PT(P_отбор[i], T2PS(P_отбор[i], s_вход_цилинда)))
        h_отбор_реал_массив.append(h_вход_цилинда - (h_вход_цилинда - h_отбор_теор_массив[i]) * этта_цилиндра)
        s_отбор_реал_массив.append(S2PT(P_отбор[i], T2PH(P_отбор[i], h_отбор_реал_массив[i])))
        t_отбор_реал_массив.append(T2PH(P_отбор[i], h_отбор_реал_массив[i]))

    # расход теплоты на часть турбины
    H_отсеков = 0
    for i in range(len(P_отбор) - 1):
        H_отсеков += G_отбор[i] * (h_выход_цилинда_реал - h_отбор_реал_массив[i])

    H_полн = G_вход * (h_вход_цилинда - h_выход_цилинда_реал) + H_отсеков

    # Блок выходных параметров

    # print(f'\nЭнтальпия пара перед цилиндром: {round(h_вход_цилинда, 3)} кДж/кг\n'
    #       f'Энтропия пара перед цилиндром: {round(s_вход_цилинда, 3)} кДж/кг*К\n'
    #       f'Энтальпия перед после цилиндра: {round(h_выход_цилинда_реал, 3)} кДж/кг\n'
    #       f'Энтропия пара после цилиндра: {round(s_выход_цилинда_реал, 3)} кДж/кг*К\n'
    #       f'Температура пара после цилиндра: {round(t_выход_цилинда_реал, 1)} К\n')

    # for i in range(len(P_отбор)):
        # print(f'Значения в {i + 1} отборе: \n'
        #       f'Энтальпия пара: {round(h_отбор_реал_массив[i], 3)} кДж/кг\n'
        #       f'Температура пара в отборе: {round(t_отбор_реал_массив[i], 1)} К\n')

    list_P_отбор = [1, round(h_отбор_реал_массив[0], 3), round(t_отбор_реал_массив[0], 1)]

    return [
        round(h_вход_цилинда, 3),
        round(s_вход_цилинда, 3),
        round(h_выход_цилинда_реал, 3),
        round(s_выход_цилинда_реал, 3),
        round(t_выход_цилинда_реал, 1),
        list_P_отбор
    ]

# print(RST)


# def search_values():
#     for i in range(10000):
#         var_1 = random.uniform(20, 600)
#         var_2 = random.uniform(0.5, 5)
#         var_3 = random.uniform(400, 1500)
#         var_4 = random.uniform(0.05, 0.8)
#         var_5 = random.uniform(0.8, 0.99)
#         var_6 = random.uniform(0.1, 3)
#         var_7 = random.uniform(2, 9)
#
#         RST = WSP([var_1, var_2, var_3, var_4, var_5, [var_6], [var_7]])
#         res_1, res_2 = RST[5][1], RST[5][2]
#         if math.fabs(res_1 - 2556.2) < 1000 and math.fabs(res_2 - 180) < 100:
#             print([var_1, var_2, var_3, var_4, var_5, [var_6], [var_7]])
#
#
# # search_values()