from math import *
import numpy as np
import pandas as pd


# Функция определения температуры (Т, К) как зависимость от давления (p, МПа) на линии насыщения
def TSP(p):
    # p ВХОДНОЕ ЗНАЧЕНИЕ
    n = [0, 0.11670521452767 * 10 ** 4, -0.72421316703206 * 10 ** 6, -0.17073846940092 * 10 ** 2,
         0.1202082470247 * 10 ** 5, -0.32325550322333 * 10 ** 7, 0.1491510861353 * 10 ** 2, -0.48232657361591 * 10 ** 4,
         0.40511340542057 * 10 ** 6, -0.23855557567849, 0.65017534844798 * 10 ** 3]

    beta = p ** 0.25
    E = beta * beta + n[3] * beta + n[6]
    F = n[1] * beta * beta + n[4] * beta + n[7]
    G = n[2] * beta * beta + n[5] * beta + n[8]
    D = 2 * G / (- F - ((F * F - 4 * E * G) ** 0.5))
    T = (n[10] + D - ((n[10] + D) ** 2 - 4 * (n[9] + n[10] * D)) ** 0.5) / 2

    return T


# Блок входных параметров
# print('Блок входных параметров:\n') - ВХОДНОЕ ЗНАЧЕНИЕ
# P_п = float(input('Введите давление греющего пара, МПа: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# t_вх = float(input('Введите температуру конденсата на входе в подогреватель, °С: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# G_к = float(input('Введите расход конденсата через подогреватель, т/ч: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# d_вн = float(input('Введите внутренний диаметр трубок, м: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# d_нар = float(input('Введите наружний диаметр трубок, м: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# z = float(input('Введите число ходов воды: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# l = float(input('Введите длину трубного пучка, м: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# N = float(input('Введите колличество трубок в подогревателе, м: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# F = float(input('Введите значение площади нагрева, м^2: ')) - ВХОДНОЕ ЗНАЧЕНИЕ
# lyambda_me = float(input('Введите темплопроводность металла трубок, Вт/м*°С: ')) - ВХОДНОЕ ЗНАЧЕНИЕ


# Процедура расчета параметров модели при идеальном состоянии оборудования
def lph_ideal(args: list):
    # заглушка
    return 1, 1, 1
    # Блок входных параметров
    P_п = args[0]  # 10
    t_вх = args[1]  # 20
    G_к = args[2]  # 280
    d_вн = args[3]  # 28
    d_нар = args[4]  # 26
    z = args[5]  # 2
    l = args[6]  # 5.714
    N = args[7]  # 24296
    F = args[8]  # 36138
    lyambda_me = args[9]  # 0.683

    tetta = 2  # °C, недогрев воды в подогревателе до температуры насыщения греющего пара в первой итерации
    t_н = TSP(P_п) - 273.15  # °C температура насыщения в ПНД (находим по давлению греющего пара)
    delta = 1  # относительное значение изменения температур на выходе из подогревателя при итерациях

    while delta > 0.0001:
        t_вых = t_н - tetta  # °C, температура конденсата на выходе из подогревателя

        delta_t = (t_вых - t_вх) / log((t_н - t_вх) / (t_н - t_вых))  # среднелогарифмическая разность температур
        t_v_avg = t_н - delta_t  # средняя температура воды

        # По температуре находим следующие параметры:
        lambda_v = 0.686  # коэффициент теплопроводности
        mu = 0.254 * (10 ** (-6))  # коэффициент кинематической вязкости
        Pr = 1.481  # число Прандтля

        w_в = (4 * G_к * z) / (pi * (d_вн ** 2) * N * 3600)  # м/с, скорость движения воды в трубах
        Re_в = w_в * d_вн / mu  # число Рейнольдса
        alpha_в = 0.023 * Re_в ** 0.8 * Pr ** 0.4 * (lambda_v / d_вн)  # коэффициент теплоотдачи конденсирующегося
        # пара к стенкам труб

        c_в = 4.19  # теплоемкость воды
        Q = G_к * c_в * (10 ** 3) * (t_вых - t_вх) / 3600  # Количество полученной основным конденсатом теплоты
        d_ср = (d_нар + d_вн) / 2
        t_ст = t_v_avg + (Q * (10 ** 6) * (0.016 ** 2) / F * (0.014 ** 2)) * (
                1 / alpha_в + ((d_нар - d_вн) * d_вн ** 2) / 2 * lyambda_me * d_ср ** 2)

        delta_t_пс = t_н - t_ст  # Разность температур между греющим паром и стенкой трубок
        t_пл = (t_н + t_ст) / 2  # Температура пленки конденсата

        delta_t_кр = 395 * 63.54 * t_пл ** (-1.762) / l * 10 ** (-3)

        alpha_п = 0.16 * 1.163 * (8116.7 * (t_пл ** 0.309)) + 1.163 * (18361.1 - 48.06 * t_пл) / (
                l * (10 ** (-3)) * delta_t_пс)  # коэффициент теплоотдачи со стороны пара

        k_ideal = 1 / ((1 / alpha_в) * (d_нар / d_вн) + (d_нар / lyambda_me) * log(
            d_нар / d_вн) + 1 / alpha_п)  # коэффициент теплопередачи Вт/(м^2*K)

        delta_t_out_ideal = (t_вых - t_вх) / (e ** (k_ideal * F / (G_к * 1163)) - 1)

        tetta = delta_t_out_ideal  # переприсвоение недогрева для следующей иттерации расчета
        t_out = t_н - delta_t_out_ideal  # новая температура конденсата на выходе из подогревателя

        delta = (t_out - t_вых) / t_out  # относительное изменение температуры на выходе из подогревателя при итерации

        print(f'\nВыходные данные программы:\n\n'
              f'Истинный коэффициент теплопередачи: {round(k_ideal, 3)} Вт/м^2*K \n'  # ВЫХОДНОЕ ЗНАЧЕНИЕ
              f'Недогрев основного конденсата до температуры насыщения: {round(delta_t_out_ideal, 3)} °C\n'  # ВЫХОДНОЕ ЗНАЧЕНИЕ
              f'Выходная температура конденсата: {round(t_out, 3)} °C\n')  # ВЫХОДНОЕ ЗНАЧЕНИЕ

    return k_ideal, delta_t_out_ideal, t_out


# lph_ideal(
#     [
#         10,
#         20,
#         280,
#         28,
#         26,
#         2,
#         5.714,
#         24296,
#         36138,
#         0.683
#     ]
# )


# Процедура расчета параметров работающего оборудования
def lph_real(args: list):
    # заглушка
    return 2, 2

    # Блок входных параметров
    P_п = args[0]  # 10
    t_вх = args[1]  # 20
    G_к = args[2]  # 280
    d_вн = args[3]  # 28
    d_нар = args[4]  # 26
    z = args[5]  # 2
    l = args[6]  # 5.714
    N = args[7]  # 24296
    F = args[8]  # 36138
    lyambda_me = args[9]  # 0.683

    # P_п - ВХОДНОЕ ЗНАЧЕНИЕ
    # t_вх - ВХОДНОЕ ЗНАЧЕНИЕ
    # t_вых - ВХОДНОЕ ЗНАЧЕНИЕ
    # G_к - ВХОДНОЕ ЗНАЧЕНИЕ
    # d_вн - ВХОДНОЕ ЗНАЧЕНИЕ
    # d_нар - ВХОДНОЕ ЗНАЧЕНИЕ
    # z - ВХОДНОЕ ЗНАЧЕНИЕ
    # l - ВХОДНОЕ ЗНАЧЕНИЕ
    # N - ВХОДНОЕ ЗНАЧЕНИЕ
    # F - ВХОДНОЕ ЗНАЧЕНИЕ

    # lyambda_me

    t_н = TSP(P_п) - 273.15  # °C температура насыщения в ПНД (находим по давлению греющего пара)

    delta_t_out_real = t_н - t_вых  # °C, надогрев основного конденсата до температуры насыщения греющего пара

    # Далее находим коэффицент теплопередачи

    delta_t = (t_вых - t_вх) / log((t_н - t_вх) / (t_н - t_вых))  # среднелогарифмическая разность температур
    t_v_avg = t_н - delta_t  # средняя температура воды

    # По температуре находим следующие параметры:

    lambda_v = 0.686  # коэффициент теплопроводности
    mu = 0.254 * (10 ** (-6))  # коэффициент кинематической вязкости
    Pr = 1.481  # число Прандтля
    w_в = (4 * G_к * z) / (pi * (d_вн ** 2) * N * 3600)  # м/с, скорость движения воды в трубах
    Re_в = w_в * d_вн / mu  # число Рейнольдса
    alpha_в = 0.023 * Re_в ** 0.8 * Pr ** 0.4 * (lambda_v / d_вн)  # коэффициент теплоотдачи конденсирующегося
    # пара к стенкам труб
    c_в = 4.19  # теплоемкость воды
    Q = G_к * c_в * (10 ** 3) * (t_вых - t_вх) / 3600  # Количество полученной основным конденсатом теплоты
    d_ср = (d_нар + d_вн) / 2
    t_ст = t_v_avg + (Q * (10 ** 6) * (0.016 ** 2) / F * (0.014 ** 2)) * (
            1 / alpha_в + ((d_нар - d_вн) * d_вн ** 2) / 2 * lyambda_me * d_ср ** 2)
    delta_t_пс = t_н - t_ст  # Разность температур между греющим паром и стенкой трубок
    t_пл = (t_н + t_ст) / 2  # Температура пленки конденсата
    delta_t_кр = 395 * 63.54 * t_пл ** (-1.762) / l * 10 ** (-3)
    alpha_п = 0.16 * 1.163 * (8116.7 * (t_пл ** 0.309)) + 1.163 * (18361.1 - 48.06 * t_пл) / (
            l * (10 ** (-3)) * delta_t_пс)  # коэффициент теплоотдачи со стороны пара
    k_real = 1 / ((1 / alpha_в) * (d_нар / d_вн) + (d_нар / lyambda_me) * log(
        d_нар / d_вн) + 1 / alpha_п)  # коэффициент теплопередачи Вт/(м^2*K)

    return k_real, delta_t_out_real


# процедура определения ИТС
def technical_condition_lph(res_args, cmp_args):

    return -1, "Текст", "Текст", 2

    k_ideal = res_args[0]
    delta_t_out_ideal = res_args[1]

    k_real = cmp_args[0]
    delta_t_out_real = cmp_args[1]

    difference_k = abs(k_ideal - k_real) * 100 / k_ideal  # находим разницу между реальным и идеальным значением
    # коэффициента теплопередачи
    difference_delta_t_out = abs(delta_t_out_ideal - delta_t_out_real) * 100 / delta_t_out_ideal  # находим разницу
    # между реальным и идеальным значением надогрева конденсата до температуры насыщения

    # Границы отклонения для технических состояний (для коэффециента теплопередачи и недогрева):
    delta_k_max = 20
    delta_k_min = 3
    delta_t_out_max = 70
    delta_t_out_min = 10

    # Определяем значение оценки для разницы недогрева основного конденсата
    Z_delta_t_out = (-100 / (delta_t_out_max - delta_t_out_min)) * difference_delta_t_out + (
            (100 * delta_t_out_max) / (delta_t_out_max - delta_t_out_min))
    if Z_delta_t_out > 100:
        Z_delta_t_out = 100
    elif Z_delta_t_out < 0:
        Z_delta_t_out = 0
    else:
        Z_delta_t_out = Z_delta_t_out

    # Определяем значение оценки для разницы коэффициента теплопередачи
    Z_k = (-100 / (delta_k_max - delta_k_min)) * difference_k + ((100 * delta_k_max) / (delta_k_max - delta_k_min))

    if Z_k > 100:
        Z_k = 100
    elif Z_k < 0:
        Z_k = 0
    else:
        Z_k = Z_k

    # Веса параметров для нахождения итогового ИТС
    w_k = 0.35
    w_delta_t_out = 0.65

    # Итоговое значение ИТС поверхностного подогревателя низкого давления
    ИТС = w_k * Z_k + w_delta_t_out * Z_delta_t_out
    verbal_assesment = ''
    recommend = ''
    state = 0
    if ИТС > 85:
        verbal_assesment = 'очень хорошее'
        recommend = 'Плановое диагностирование'
    elif 70 < ИТС < 85:
        verbal_assesment = 'хорошее'
        recommend = 'По результатам планового диагностирования'
        state = 1
    elif 50 < ИТС < 70:
        verbal_assesment = 'удовлетворительное'
        recommend = 'Усиленный контроль технического состояния, капитальный ремонт, реконструкция'
        state = 2
    elif 25 < ИТС < 50:
        verbal_assesment = 'неудовлетворительное'
        recommend = 'Дополнительное техническое обслуживание и ремонт, усиленный контроль технического состояния, техническое перевооружение'
        state = 3
    else:
        verbal_assesment = 'критическое'
        recommend = 'Вывод из эксплуатации, техническое перевооружение и реконструкция'
        state = 4

    Txt = "Технического состояния оборудования - {0} Рекомендуемое техническое воздействие - {1}ИТС равен {2:1.3f}".format(
        verbal_assesment, recommend, ИТС)
    return ИТС, verbal_assesment, recommend, state  # ВЫХОДНОЕ ЗНАЧЕНИЕ
